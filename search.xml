<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024 SAINTSEC招新赛 babyXor</title>
      <link href="/2024/02/02/2024-SAINTSEC%E6%8B%9B%E6%96%B0%E8%B5%9B-babyXor/"/>
      <url>/2024/02/02/2024-SAINTSEC%E6%8B%9B%E6%96%B0%E8%B5%9B-babyXor/</url>
      
        <content type="html"><![CDATA[<h2 id="题目源码">题目源码</h2><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> getPrime, bytes_to_long</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> secret <span class="im">import</span> flag</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>bits <span class="op">=</span> <span class="dv">1024</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>lbits <span class="op">=</span> <span class="dv">727</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> getPrime(bits)</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>q <span class="op">=</span> getPrime(bits)</span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>r <span class="op">=</span> getPrime(bits)</span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> p <span class="op">*</span> q <span class="op">*</span> r</span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>leak1 <span class="op">=</span> (p <span class="op">^</span> q) <span class="op">&amp;</span> ((<span class="dv">1</span> <span class="op">&lt;&lt;</span> lbits) <span class="op">-</span> <span class="dv">1</span>)</span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>leak2 <span class="op">=</span> (p <span class="op">^</span> r) <span class="op">&amp;</span> ((<span class="dv">1</span> <span class="op">&lt;&lt;</span> lbits) <span class="op">-</span> <span class="dv">1</span>)</span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>e <span class="op">=</span> <span class="dv">65537</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>m <span class="op">=</span> bytes_to_long(flag)</span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>c <span class="op">=</span> <span class="bu">pow</span>(m, e, n)</span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;e     = </span><span class="sc">%d</span><span class="st">&#39;</span> <span class="op">%</span> e)</span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;n     = </span><span class="sc">%d</span><span class="st">&#39;</span> <span class="op">%</span> n)</span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;c     = </span><span class="sc">%d</span><span class="st">&#39;</span> <span class="op">%</span> c)</span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;leak1 = </span><span class="sc">%d</span><span class="st">&#39;</span> <span class="op">%</span> leak1)</span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&#39;leak2 = </span><span class="sc">%d</span><span class="st">&#39;</span> <span class="op">%</span> leak2)</span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="co">e     = 65537</span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a><span class="co">n     = 1788485365971167139893976906995201599393991984730899739160710674777347503264990436377925016407467205562818673582884591093334742911296215438134392163621071216597239424167461640156243867007799848069640765458953799357090481384070656485639260354680104576859762742406179822759588985026256682521122918260248188943170906364668880900389721037712147697968842251371800322257909074895166286731090600795397079743517569826508772622673188453246690438271487306785398984736870717326368570396504028787676569871895082188940448260121434898226689994421287087972092995874799564845403786011487127989625066205672887331142149114508908796736726306648414611051829775590084949607823908798126165790554952500212854407379390318504882338212271542332798222698822087545611811034575838828651215938733920629226894510641783869825156723491408324639208336361754500958396307785361835670569766837213412973923647677105282688965951154274654343911853657430444492785123</span></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="co">c     = 1078589324773767953473759512827608820495855687588804241774570338199816192245246945655423884421968881815026745434531917679093453140825006911450356790077888790622370812871115852459528002467186637293402465584745754099967482815269328812022616916977103430759309858624665169897639104927941330243454380400842761382443280820636043298545631686307555050868196903943079467782866667252042167199806068944033224857861174338859558383522930904107201540947686285781563193057611007020075192651346489604982063300279039295967529688464035783949701840882155119903012356069850656951389232310697772834360597371258435804013918531653289990482056791319073716271066840368428213479355811554805632696492409180961462749083358184755813094938321172199412926968725896617862738453158306885238038585777519825810362378224313745472168020943062302426574423438604186343565471299100384224950976588796352886076890807833277535113775312453569491592577033233977480008109</span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a><span class="co">leak1 = 488269416710560600828802453589788752554845853211480832349238055736908292717162055356440046013400904563050150488789394892307126473011104585301981785809125147008394648945737600216051446563643365501993320947091643963593566</span></span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a><span class="co">leak2 = 303943197493421459259815118733411019037231391415726394765369263625985425775543920421794250357974063051629312885056512805804258920164317820406672326172387545965590065358003572572488475642063442608145972094732177497155756</span></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div><h2 id="分析">分析</h2><h3 id="异或">异或</h3><p>给出了 <span class="math inline">\(p \oplus q\)</span> 和 <span class="math inline">\(p \oplus r\)</span> 的低位，参考之前的文章<a href="https://skatexu.github.io/2023/11/30/RSA-p-q/">RSA-p^q</a>，这道题只是多了一个因子，原理还是一样，稍微调整一下<code>pq_low_xor</code>函数即可</p><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> pqr_low_xor(p<span class="op">=</span><span class="st">&quot;&quot;</span>, q<span class="op">=</span><span class="st">&quot;&quot;</span>, r<span class="op">=</span><span class="st">&quot;&quot;</span>):</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    lp, lq, lr <span class="op">=</span> <span class="bu">len</span>(p), <span class="bu">len</span>(q), <span class="bu">len</span>(r)</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    tp <span class="op">=</span> <span class="bu">int</span>(p, <span class="dv">2</span>) <span class="cf">if</span> p <span class="cf">else</span> <span class="dv">0</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    tq <span class="op">=</span> <span class="bu">int</span>(q, <span class="dv">2</span>) <span class="cf">if</span> q <span class="cf">else</span> <span class="dv">0</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    tr <span class="op">=</span> <span class="bu">int</span>(r, <span class="dv">2</span>) <span class="cf">if</span> r <span class="cf">else</span> <span class="dv">0</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> tp <span class="op">*</span> tq <span class="op">*</span> tr <span class="op">%</span> <span class="dv">2</span><span class="op">**</span>lp <span class="op">!=</span> n <span class="op">%</span> <span class="dv">2</span><span class="op">**</span>lp:</span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> lp <span class="op">==</span> leak_bits:</span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        pqr.append(tp)</span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> xor1[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;1&quot;</span> <span class="kw">and</span> xor2[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;1&quot;</span>:</span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;1&quot;</span> <span class="op">+</span> p, <span class="st">&quot;0&quot;</span> <span class="op">+</span> q, <span class="st">&quot;0&quot;</span> <span class="op">+</span> r)</span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;0&quot;</span> <span class="op">+</span> p, <span class="st">&quot;1&quot;</span> <span class="op">+</span> q, <span class="st">&quot;1&quot;</span> <span class="op">+</span> r)</span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> xor1[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;0&quot;</span> <span class="kw">and</span> xor2[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;0&quot;</span>:</span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;1&quot;</span> <span class="op">+</span> p, <span class="st">&quot;1&quot;</span> <span class="op">+</span> q, <span class="st">&quot;1&quot;</span> <span class="op">+</span> r)</span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;0&quot;</span> <span class="op">+</span> p, <span class="st">&quot;0&quot;</span> <span class="op">+</span> q, <span class="st">&quot;0&quot;</span> <span class="op">+</span> r)</span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> xor1[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;1&quot;</span> <span class="kw">and</span> xor2[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;0&quot;</span>:</span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;1&quot;</span> <span class="op">+</span> p, <span class="st">&quot;0&quot;</span> <span class="op">+</span> q, <span class="st">&quot;1&quot;</span> <span class="op">+</span> r)</span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;0&quot;</span> <span class="op">+</span> p, <span class="st">&quot;1&quot;</span> <span class="op">+</span> q, <span class="st">&quot;0&quot;</span> <span class="op">+</span> r)</span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> xor1[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;0&quot;</span> <span class="kw">and</span> xor2[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;1&quot;</span>:</span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;1&quot;</span> <span class="op">+</span> p, <span class="st">&quot;1&quot;</span> <span class="op">+</span> q, <span class="st">&quot;0&quot;</span> <span class="op">+</span> r)</span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;0&quot;</span> <span class="op">+</span> p, <span class="st">&quot;0&quot;</span> <span class="op">+</span> q, <span class="st">&quot;1&quot;</span> <span class="op">+</span> r)</span></code></pre></div><h3 id="coppersmith恢复高位">coppersmith恢复高位</h3><p>出题人故意卡了coppersmith的下界，需要用epsilon参数来提高界限的精度，参考2023鹏城杯</p><p>用coppersmith恢复p之后，根据<code>leak1 = (p ^ q) &amp; ((1 &lt;&lt; lbits) - 1)</code>，将p和leak1异或得到q的低位，再用一次coppersmith就可以恢复q，算出n的全部因子</p><h2 id="解题">解题</h2><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sage.<span class="bu">all</span> <span class="im">import</span> <span class="op">*</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>e     <span class="op">=</span> <span class="dv">65537</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>n     <span class="op">=</span> <span class="dv">1788485365971167139893976906995201599393991984730899739160710674777347503264990436377925016407467205562818673582884591093334742911296215438134392163621071216597239424167461640156243867007799848069640765458953799357090481384070656485639260354680104576859762742406179822759588985026256682521122918260248188943170906364668880900389721037712147697968842251371800322257909074895166286731090600795397079743517569826508772622673188453246690438271487306785398984736870717326368570396504028787676569871895082188940448260121434898226689994421287087972092995874799564845403786011487127989625066205672887331142149114508908796736726306648414611051829775590084949607823908798126165790554952500212854407379390318504882338212271542332798222698822087545611811034575838828651215938733920629226894510641783869825156723491408324639208336361754500958396307785361835670569766837213412973923647677105282688965951154274654343911853657430444492785123</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>c     <span class="op">=</span> <span class="dv">1078589324773767953473759512827608820495855687588804241774570338199816192245246945655423884421968881815026745434531917679093453140825006911450356790077888790622370812871115852459528002467186637293402465584745754099967482815269328812022616916977103430759309858624665169897639104927941330243454380400842761382443280820636043298545631686307555050868196903943079467782866667252042167199806068944033224857861174338859558383522930904107201540947686285781563193057611007020075192651346489604982063300279039295967529688464035783949701840882155119903012356069850656951389232310697772834360597371258435804013918531653289990482056791319073716271066840368428213479355811554805632696492409180961462749083358184755813094938321172199412926968725896617862738453158306885238038585777519825810362378224313745472168020943062302426574423438604186343565471299100384224950976588796352886076890807833277535113775312453569491592577033233977480008109</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>leak1 <span class="op">=</span> <span class="dv">488269416710560600828802453589788752554845853211480832349238055736908292717162055356440046013400904563050150488789394892307126473011104585301981785809125147008394648945737600216051446563643365501993320947091643963593566</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>leak2 <span class="op">=</span> <span class="dv">303943197493421459259815118733411019037231391415726394765369263625985425775543920421794250357974063051629312885056512805804258920164317820406672326172387545965590065358003572572488475642063442608145972094732177497155756</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> pqr_low_xor(p<span class="op">=</span><span class="st">&quot;&quot;</span>, q<span class="op">=</span><span class="st">&quot;&quot;</span>, r<span class="op">=</span><span class="st">&quot;&quot;</span>):</span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    lp, lq, lr <span class="op">=</span> <span class="bu">len</span>(p), <span class="bu">len</span>(q), <span class="bu">len</span>(r)</span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    tp <span class="op">=</span> <span class="bu">int</span>(p, <span class="dv">2</span>) <span class="cf">if</span> p <span class="cf">else</span> <span class="dv">0</span></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    tq <span class="op">=</span> <span class="bu">int</span>(q, <span class="dv">2</span>) <span class="cf">if</span> q <span class="cf">else</span> <span class="dv">0</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    tr <span class="op">=</span> <span class="bu">int</span>(r, <span class="dv">2</span>) <span class="cf">if</span> r <span class="cf">else</span> <span class="dv">0</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> tp <span class="op">*</span> tq <span class="op">*</span> tr <span class="op">%</span> <span class="dv">2</span><span class="op">**</span>lp <span class="op">!=</span> n <span class="op">%</span> <span class="dv">2</span><span class="op">**</span>lp:</span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> lp <span class="op">==</span> leak_bits:</span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>        pqr.append(tp)</span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> xor1[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;1&quot;</span> <span class="kw">and</span> xor2[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;1&quot;</span>:</span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;1&quot;</span> <span class="op">+</span> p, <span class="st">&quot;0&quot;</span> <span class="op">+</span> q, <span class="st">&quot;0&quot;</span> <span class="op">+</span> r)</span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;0&quot;</span> <span class="op">+</span> p, <span class="st">&quot;1&quot;</span> <span class="op">+</span> q, <span class="st">&quot;1&quot;</span> <span class="op">+</span> r)</span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> xor1[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;0&quot;</span> <span class="kw">and</span> xor2[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;0&quot;</span>:</span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;1&quot;</span> <span class="op">+</span> p, <span class="st">&quot;1&quot;</span> <span class="op">+</span> q, <span class="st">&quot;1&quot;</span> <span class="op">+</span> r)</span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;0&quot;</span> <span class="op">+</span> p, <span class="st">&quot;0&quot;</span> <span class="op">+</span> q, <span class="st">&quot;0&quot;</span> <span class="op">+</span> r)</span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> xor1[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;1&quot;</span> <span class="kw">and</span> xor2[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;0&quot;</span>:</span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;1&quot;</span> <span class="op">+</span> p, <span class="st">&quot;0&quot;</span> <span class="op">+</span> q, <span class="st">&quot;1&quot;</span> <span class="op">+</span> r)</span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;0&quot;</span> <span class="op">+</span> p, <span class="st">&quot;1&quot;</span> <span class="op">+</span> q, <span class="st">&quot;0&quot;</span> <span class="op">+</span> r)</span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> xor1[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;0&quot;</span> <span class="kw">and</span> xor2[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;1&quot;</span>:</span><span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;1&quot;</span> <span class="op">+</span> p, <span class="st">&quot;1&quot;</span> <span class="op">+</span> q, <span class="st">&quot;0&quot;</span> <span class="op">+</span> r)</span><span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>        pqr_low_xor(<span class="st">&quot;0&quot;</span> <span class="op">+</span> p, <span class="st">&quot;0&quot;</span> <span class="op">+</span> q, <span class="st">&quot;1&quot;</span> <span class="op">+</span> r)</span><span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a>leak_bits <span class="op">=</span> <span class="dv">727</span></span><span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a>xor1 <span class="op">=</span> <span class="bu">bin</span>(leak1)[<span class="dv">2</span>:].zfill(<span class="dv">727</span>)</span><span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a>xor2 <span class="op">=</span> <span class="bu">bin</span>(leak2)[<span class="dv">2</span>:].zfill(<span class="dv">727</span>)</span><span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a>pqr <span class="op">=</span> []</span><span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a>pqr_low_xor()</span><span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a><span class="co"># print(pqr)</span></span><span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-46"><a href="#cb3-46" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> p_low <span class="kw">in</span> pqr:</span><span id="cb3-47"><a href="#cb3-47" aria-hidden="true" tabindex="-1"></a>    x <span class="op">=</span> PolynomialRing(Zmod(n), <span class="st">&#39;x&#39;</span>).gen()</span><span id="cb3-48"><a href="#cb3-48" aria-hidden="true" tabindex="-1"></a>    f <span class="op">=</span> x <span class="op">*</span> <span class="dv">2</span><span class="op">**</span><span class="dv">727</span> <span class="op">+</span> p_low</span><span id="cb3-49"><a href="#cb3-49" aria-hidden="true" tabindex="-1"></a>    res <span class="op">=</span> f.monic().small_roots(X<span class="op">=</span><span class="dv">2</span><span class="op">**</span>(<span class="dv">1024</span><span class="op">-</span><span class="dv">727</span>), beta<span class="op">=</span><span class="fl">0.33</span>, epsilon<span class="op">=</span><span class="fl">0.01</span>)</span><span id="cb3-50"><a href="#cb3-50" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> res:</span><span id="cb3-51"><a href="#cb3-51" aria-hidden="true" tabindex="-1"></a>        p <span class="op">=</span> <span class="bu">int</span>(f(res[<span class="dv">0</span>]))</span><span id="cb3-52"><a href="#cb3-52" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> n <span class="op">%</span> p <span class="op">==</span> <span class="dv">0</span>:</span><span id="cb3-53"><a href="#cb3-53" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(p)</span><span id="cb3-54"><a href="#cb3-54" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-55"><a href="#cb3-55" aria-hidden="true" tabindex="-1"></a>q_low <span class="op">=</span> (p <span class="op">^</span> leak1) <span class="op">&amp;</span> ((<span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">727</span>) <span class="op">-</span> <span class="dv">1</span>)</span><span id="cb3-56"><a href="#cb3-56" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-57"><a href="#cb3-57" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> PolynomialRing(Zmod(n<span class="op">//</span>p), <span class="st">&#39;x&#39;</span>).gen()</span><span id="cb3-58"><a href="#cb3-58" aria-hidden="true" tabindex="-1"></a>f <span class="op">=</span> x <span class="op">*</span> <span class="dv">2</span><span class="op">**</span><span class="dv">727</span> <span class="op">+</span> q_low</span><span id="cb3-59"><a href="#cb3-59" aria-hidden="true" tabindex="-1"></a>res <span class="op">=</span> f.monic().small_roots(X<span class="op">=</span><span class="dv">2</span><span class="op">**</span>(<span class="dv">1024</span><span class="op">-</span><span class="dv">727</span>), beta<span class="op">=</span><span class="fl">0.4</span>)</span><span id="cb3-60"><a href="#cb3-60" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> res:</span><span id="cb3-61"><a href="#cb3-61" aria-hidden="true" tabindex="-1"></a>    q <span class="op">=</span> <span class="bu">int</span>(f(res[<span class="dv">0</span>]))</span><span id="cb3-62"><a href="#cb3-62" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> n <span class="op">%</span> q <span class="op">==</span> <span class="dv">0</span>:</span><span id="cb3-63"><a href="#cb3-63" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(q)</span><span id="cb3-64"><a href="#cb3-64" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-65"><a href="#cb3-65" aria-hidden="true" tabindex="-1"></a>r <span class="op">=</span> n <span class="op">//</span> p <span class="op">//</span> q</span><span id="cb3-66"><a href="#cb3-66" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(r)</span><span id="cb3-67"><a href="#cb3-67" aria-hidden="true" tabindex="-1"></a><span class="cf">assert</span> p <span class="op">*</span> q <span class="op">*</span> r <span class="op">==</span> n</span><span id="cb3-68"><a href="#cb3-68" aria-hidden="true" tabindex="-1"></a>phi <span class="op">=</span> (p<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span> (q<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span> (r<span class="op">-</span><span class="dv">1</span>)</span><span id="cb3-69"><a href="#cb3-69" aria-hidden="true" tabindex="-1"></a>d <span class="op">=</span> inverse(e, phi)</span><span id="cb3-70"><a href="#cb3-70" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(long_to_bytes(<span class="bu">pow</span>(c, d, n)))</span><span id="cb3-71"><a href="#cb3-71" aria-hidden="true" tabindex="-1"></a><span class="co"># b&#39;ayyctf&#123;57592640dfec4971879852f069aa37e7&#125;&#39;</span></span></code></pre></div><p>最后发现这个flag太小了（比p还小），直接用p就可以解出</p><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>d <span class="op">=</span> inverse(e, p<span class="op">-</span><span class="dv">1</span>)</span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(long_to_bytes(<span class="bu">pow</span>(c, d, p)))</span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co"># b&#39;ayyctf&#123;57592640dfec4971879852f069aa37e7&#125;&#39;</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
          <category> 2024 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 第六届安洵杯 Cry2</title>
      <link href="/2024/01/09/2023-%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF-Cry2/"/>
      <url>/2024/01/09/2023-%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF-Cry2/</url>
      
        <content type="html"><![CDATA[<h2 id="题目源码">题目源码</h2><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding:utf-8 -*-</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> isPrime, long_to_bytes, getStrongPrime, bytes_to_long</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Cipher <span class="im">import</span> AES</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.Padding <span class="im">import</span> pad</span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> binascii</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> random</span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> string</span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> hashlib</span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> socketserver</span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>FLAG <span class="op">=</span> <span class="st">&#39;**********&#39;</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>KEY <span class="op">=</span> <span class="st">b&#39;****************&#39;</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>IV <span class="op">=</span> <span class="st">b&#39;****************&#39;</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> cbc_decrypt(c, iv):</span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    aes <span class="op">=</span> AES.new(KEY, AES.MODE_CBC, iv<span class="op">=</span>iv)</span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> aes.decrypt(c)</span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> encrypt():</span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>    plain_text <span class="op">=</span> <span class="st">&#39;&#39;</span>.join([random.choice(string.ascii_letters) <span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">2</span>)]) <span class="op">+</span> FLAG</span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    aes <span class="op">=</span> AES.new(KEY, AES.MODE_CBC, iv<span class="op">=</span>IV)</span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    plain_text <span class="op">=</span> pad(plain_text.encode(), AES.block_size)</span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    cipher <span class="op">=</span> aes.encrypt(plain_text)</span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> IV.<span class="bu">hex</span>() <span class="op">+</span> cipher.<span class="bu">hex</span>()</span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> asserts(pt: <span class="bu">bytes</span>):</span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>    num <span class="op">=</span> pt[<span class="op">-</span><span class="dv">1</span>]</span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">len</span>(pt) <span class="op">==</span> <span class="dv">16</span>:</span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>        result <span class="op">=</span> pt[::<span class="op">-</span><span class="dv">1</span>]</span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>        count <span class="op">=</span> <span class="dv">0</span></span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> i <span class="kw">in</span> result:</span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> i <span class="op">==</span> num:</span><span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>                count <span class="op">+=</span> <span class="dv">1</span></span><span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span>:</span><span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span></span><span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> count <span class="op">==</span> num:</span><span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="va">True</span></span><span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span><span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="va">False</span></span><span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">False</span></span><span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> decrypt(c):</span><span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>    iv <span class="op">=</span> c[:<span class="dv">32</span>]</span><span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>    cipher <span class="op">=</span> c[<span class="dv">32</span>:]</span><span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>    plain_text <span class="op">=</span> cbc_decrypt(binascii.unhexlify(cipher), binascii.unhexlify(iv))</span><span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> asserts(plain_text):</span><span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">True</span></span><span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">False</span></span><span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> MyServer(socketserver.BaseRequestHandler):</span><span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> proof(<span class="va">self</span>):</span><span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>        random.seed(os.urandom(<span class="dv">8</span>))</span><span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>        random_str <span class="op">=</span> <span class="st">&#39;&#39;</span>.join([random.choice(string.ascii_letters <span class="op">+</span> string.digits) <span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">20</span>)])</span><span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>        str_sha256 <span class="op">=</span> hashlib.sha256(random_str.encode()).hexdigest()</span><span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.request.sendall((<span class="st">&#39;SHA256(XXXX + </span><span class="sc">%s</span><span class="st">):</span><span class="sc">%s</span><span class="ch">\n</span><span class="st">&#39;</span> <span class="op">%</span> (random_str[<span class="dv">4</span>:], str_sha256)).encode())</span><span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.request.sendall(<span class="st">&#39;Give Me XXXX:</span><span class="ch">\n</span><span class="st">&#39;</span>.encode())</span><span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>        XXXX <span class="op">=</span> <span class="va">self</span>.request.recv(<span class="dv">2048</span>).strip()</span><span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> hashlib.sha256((XXXX <span class="op">+</span> random_str[<span class="dv">4</span>:].encode())).hexdigest() <span class="op">!=</span> str_sha256:</span><span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="va">False</span></span><span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">True</span></span><span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> handle(<span class="va">self</span>):</span><span id="cb1-73"><a href="#cb1-73" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">not</span> <span class="va">self</span>.proof():</span><span id="cb1-74"><a href="#cb1-74" aria-hidden="true" tabindex="-1"></a>            <span class="va">self</span>.request.sendall(<span class="st">b&#39;Error Hash!&#39;</span>)</span><span id="cb1-75"><a href="#cb1-75" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span></span><span id="cb1-76"><a href="#cb1-76" aria-hidden="true" tabindex="-1"></a>        cipher <span class="op">=</span> encrypt()</span><span id="cb1-77"><a href="#cb1-77" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.request.sendall(<span class="st">&#39;Welcome to AES System, please choose the following options:</span><span class="ch">\n</span><span class="st">1. encrypt the flag</span><span class="ch">\n</span><span class="st">2. decrypt the flag</span><span class="ch">\n</span><span class="st">&#39;</span>.encode())</span><span id="cb1-78"><a href="#cb1-78" aria-hidden="true" tabindex="-1"></a>        n <span class="op">=</span> <span class="dv">0</span></span><span id="cb1-79"><a href="#cb1-79" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> n <span class="op">&lt;</span> <span class="dv">65536</span>:</span><span id="cb1-80"><a href="#cb1-80" aria-hidden="true" tabindex="-1"></a>            options <span class="op">=</span> <span class="va">self</span>.request.recv(<span class="dv">512</span>).strip().decode()</span><span id="cb1-81"><a href="#cb1-81" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> options <span class="op">==</span> <span class="st">&#39;1&#39;</span>:</span><span id="cb1-82"><a href="#cb1-82" aria-hidden="true" tabindex="-1"></a>                <span class="va">self</span>.request.sendall((<span class="st">&#39;This is your flag: </span><span class="sc">%s</span><span class="ch">\n</span><span class="st">&#39;</span> <span class="op">%</span> cipher).encode())</span><span id="cb1-83"><a href="#cb1-83" aria-hidden="true" tabindex="-1"></a>            <span class="cf">elif</span> options <span class="op">==</span> <span class="st">&#39;2&#39;</span>:</span><span id="cb1-84"><a href="#cb1-84" aria-hidden="true" tabindex="-1"></a>                <span class="va">self</span>.request.sendall(<span class="st">&#39;Please enter ciphertext:</span><span class="ch">\n</span><span class="st">&#39;</span>.encode())</span><span id="cb1-85"><a href="#cb1-85" aria-hidden="true" tabindex="-1"></a>                recv_cipher <span class="op">=</span> <span class="va">self</span>.request.recv(<span class="dv">512</span>).strip().decode()</span><span id="cb1-86"><a href="#cb1-86" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> decrypt(recv_cipher):</span><span id="cb1-87"><a href="#cb1-87" aria-hidden="true" tabindex="-1"></a>                    <span class="va">self</span>.request.sendall(<span class="st">&#39;True</span><span class="ch">\n</span><span class="st">&#39;</span>.encode())</span><span id="cb1-88"><a href="#cb1-88" aria-hidden="true" tabindex="-1"></a>                <span class="cf">else</span>:</span><span id="cb1-89"><a href="#cb1-89" aria-hidden="true" tabindex="-1"></a>                    <span class="va">self</span>.request.sendall(<span class="st">&#39;False</span><span class="ch">\n</span><span class="st">&#39;</span>.encode())</span><span id="cb1-90"><a href="#cb1-90" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span>:</span><span id="cb1-91"><a href="#cb1-91" aria-hidden="true" tabindex="-1"></a>                <span class="va">self</span>.request.sendall(<span class="st">&#39;Input wrong! Please re-enter</span><span class="ch">\n</span><span class="st">&#39;</span>.encode())</span><span id="cb1-92"><a href="#cb1-92" aria-hidden="true" tabindex="-1"></a>            n <span class="op">+=</span> <span class="dv">1</span></span><span id="cb1-93"><a href="#cb1-93" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span><span id="cb1-94"><a href="#cb1-94" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-95"><a href="#cb1-95" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-96"><a href="#cb1-96" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><span id="cb1-97"><a href="#cb1-97" aria-hidden="true" tabindex="-1"></a>    <span class="cf">pass</span></span><span id="cb1-98"><a href="#cb1-98" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-99"><a href="#cb1-99" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&#39;__main__&#39;</span>:</span><span id="cb1-100"><a href="#cb1-100" aria-hidden="true" tabindex="-1"></a>    sever <span class="op">=</span> socketserver.ThreadingTCPServer((<span class="st">&#39;0.0.0.0&#39;</span>, <span class="dv">10010</span>), MyServer)</span><span id="cb1-101"><a href="#cb1-101" aria-hidden="true" tabindex="-1"></a>    ThreadedTCPServer.allow_reuse_address <span class="op">=</span> <span class="va">True</span></span><span id="cb1-102"><a href="#cb1-102" aria-hidden="true" tabindex="-1"></a>    ThreadedTCPServer.allow_reuse_port <span class="op">=</span> <span class="va">True</span></span><span id="cb1-103"><a href="#cb1-103" aria-hidden="true" tabindex="-1"></a>    sever.serve_forever()</span></code></pre></div><h2 id="分析">分析</h2><p>如果明文只有一个块，则CBC解密过程如下</p><figure><img src="/2024/01/09/2023-%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF-Cry2/image-20240110152709602.png" alt="image-20240110152709602"><figcaption aria-hidden="true">image-20240110152709602</figcaption></figure><p><span class="math inline">\(middle\ \oplus\ iv =plaintext\)</span>，即使已知iv和ciphertext，但是加密器的key未知，所以不能算出middle，也就解不出plaintext了</p><p>这一题的<strong>核心思路</strong>就是利用Padding OracleAttack爆破出middle，但是这个攻击是有条件的，我们先分析一下题目的关键代码</p><p>plaintext（FLAG）经过pad，方式是pkcs7</p><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.Padding <span class="im">import</span> pad</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>plain_text <span class="op">=</span> <span class="st">&#39;&#39;</span>.join([random.choice(string.ascii_letters) <span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">2</span>)]) <span class="op">+</span> FLAG</span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>plain_text <span class="op">=</span> pad(plain_text.encode(), AES.block_size)</span></code></pre></div><p>已知iv和ciphertext</p><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> options <span class="op">==</span> <span class="st">&#39;1&#39;</span>:</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>.request.sendall((<span class="st">&#39;This is your flag: </span><span class="sc">%s</span><span class="ch">\n</span><span class="st">&#39;</span> <span class="op">%</span> cipher).encode())</span></code></pre></div><p>服务端会用key以及我们发过去的iv和ciphertext解密得到一个plaintext，然后用<code>asserts</code>函数检查该plaintext的padding字符，如果符合pkcs7会输出"True"，不符合则输出"False"</p><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> options <span class="op">==</span> <span class="st">&#39;2&#39;</span>:</span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="va">self</span>.request.sendall(<span class="st">&#39;Please enter ciphertext:</span><span class="ch">\n</span><span class="st">&#39;</span>.encode())</span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    recv_cipher <span class="op">=</span> <span class="va">self</span>.request.recv(<span class="dv">512</span>).strip().decode()</span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> decrypt(recv_cipher):</span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.request.sendall(<span class="st">&#39;True</span><span class="ch">\n</span><span class="st">&#39;</span>.encode())</span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.request.sendall(<span class="st">&#39;False</span><span class="ch">\n</span><span class="st">&#39;</span>.encode())</span></code></pre></div><p>总结一下，我们现在已知</p><ol type="1"><li>plaintext经过pad</li><li>已知iv和ciphertext（其实只要有iv就足够了）</li><li>解密的iv和ciphertext可控，解密得到plaintext，检查其padding是否正确并输出检查结果</li></ol><p>符合上面这些条件，就可以用Padding Oracle Attack来恢复plaintext了</p><p><em>这里做个小小的拓展：在Shiro721(CVE-2019-12422)中，就有用到PaddingOracleAttack，不同于这一题，攻击者是通过<strong>状态码</strong>来推断解密和检验是否成功的</em></p><blockquote><ul><li>如果data值没有被篡改，则解密成功，并且业务校验成功，响应200</li><li>如果data值被篡改，服务端无法完成解密，解密校验失败，则响应500</li><li>如果data值被篡改，但是服务端解密成功，但业务逻辑校验失败，则可能返回200或302等响应码,而不是响应500</li></ul></blockquote><h3 id="padding-oracle-attack">Padding Oracle Attack</h3><p>下面是从网上找来的一张攻击原理图</p><figure><img src="/2024/01/09/2023-%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF-Cry2/Padding%20Oracle%20Attack.webp" alt="Padding Oracle Attack"><figcaption aria-hidden="true">Padding Oracle Attack</figcaption></figure><p>就用上图里的例子</p><p>首先爆破my_iv的最后一位，当我们爆破到0x2e时，因为<code>0x2e ^ 0x2f = 0x01</code>，解出来的plaintext最后一位是0x01，符合padding，服务端就会返回True，我们就能确定middle的最后一位是0x2f</p><p>接着爆破my_iv的倒数第二位，这里需要注意，my_iv的最后一位不是0x2e了，因为我们的目标是使plaintext符合padding，两位的情况下plaintext最后两位应该是0x0202，<code>0x2f ^ 0x02 = 0x2d</code>，所以最后一位应该设置为0x2d。然后进行爆破，当爆破到0x1c2d时，因为<code>0x1c2d ^ 0x1e2f = 0x0202</code>，符合padding，返回True，确定middle的最后两位是0x1e2f</p><p>继续爆破my_iv的倒数第三位，<code>0x1e2f ^ 0x0303 = 0x1d2c</code>，最后两位设置为0x1d2c，当爆破到0x041d2c时，因为<code>0x041d2c ^ 0x071e2f = 0x030303</code>，符合padding，返回True，确定middle的最后三位是0x071e2f</p><p>。。。</p><p>以此类推，爆破完16位，最多需要交互<code>16 * 256 = 4096</code>次（题目限制了最多65536次），即可推出完整的middle，然后跟一开始题目给出的iv进行异或就可以得到flag</p><h2 id="具体实现">具体实现</h2><p>验证Padding Oracle Attack</p><div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> pwn <span class="im">import</span> <span class="op">*</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> copy <span class="im">import</span> deepcopy</span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> tqdm <span class="im">import</span> trange</span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Cipher <span class="im">import</span> AES</span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> random</span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> AES_CBC_enc(m, key, iv):</span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    aes <span class="op">=</span> AES.new(key, AES.MODE_CBC, iv)</span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> aes.encrypt(m)</span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> AES_CBC_dec(c, key, iv):</span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    aes <span class="op">=</span> AES.new(key, AES.MODE_CBC, iv)</span><span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> aes.decrypt(c)</span><span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> padding_to_16(msg):</span><span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>    padding <span class="op">=</span> <span class="dv">16</span> <span class="op">-</span> (<span class="bu">len</span>(msg) <span class="op">%</span> <span class="dv">16</span>)</span><span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> msg <span class="op">+</span> <span class="bu">bytes</span>([padding]) <span class="op">*</span> padding</span><span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a><span class="co"># unpadding and check padding characters</span></span><span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> unpadding(msg):</span><span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>    padding <span class="op">=</span> msg[<span class="op">-</span><span class="dv">1</span>]</span><span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> padding <span class="op">==</span> <span class="dv">0</span>:</span><span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> msg, <span class="va">False</span></span><span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(padding):</span><span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> (msg[<span class="op">-</span>i<span class="op">-</span><span class="dv">1</span>] <span class="op">!=</span> padding):</span><span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> msg, <span class="va">False</span></span><span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> msg[:<span class="op">-</span>padding], <span class="va">True</span></span><span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> padding_oracle_attack(msg_enc, key, iv):</span><span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a>    middle <span class="op">=</span> [<span class="dv">0</span>] <span class="op">*</span> <span class="dv">16</span></span><span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i <span class="kw">in</span> trange(<span class="dv">16</span>):</span><span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a>        my_iv <span class="op">=</span> deepcopy(middle)</span><span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> i <span class="op">!=</span> <span class="dv">0</span>:</span><span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a>            my_iv[<span class="op">-</span>i:] <span class="op">=</span> xor(my_iv[<span class="op">-</span>i:], [i<span class="op">+</span><span class="dv">1</span>]<span class="op">*</span>i)</span><span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(my_iv)</span><span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> j <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">256</span>):</span><span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a>            my_iv[<span class="op">-</span>i<span class="op">-</span><span class="dv">1</span>] <span class="op">=</span> j</span><span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a>            msg_after_padding <span class="op">=</span> AES_CBC_dec(msg_enc, key, <span class="bu">bytes</span>(my_iv))</span><span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a>            flag <span class="op">=</span> unpadding(msg_after_padding)[<span class="dv">1</span>]</span><span id="cb5-47"><a href="#cb5-47" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> flag <span class="op">==</span> <span class="va">True</span>:</span><span id="cb5-48"><a href="#cb5-48" aria-hidden="true" tabindex="-1"></a>                middle[<span class="op">-</span>i<span class="op">-</span><span class="dv">1</span>] <span class="op">=</span> j <span class="op">^</span> (i<span class="op">+</span><span class="dv">1</span>)</span><span id="cb5-49"><a href="#cb5-49" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span></span><span id="cb5-50"><a href="#cb5-50" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-51"><a href="#cb5-51" aria-hidden="true" tabindex="-1"></a>    msg_after_padding <span class="op">=</span> xor(middle, <span class="bu">bytearray</span>(iv))</span><span id="cb5-52"><a href="#cb5-52" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(msg_after_padding)</span><span id="cb5-53"><a href="#cb5-53" aria-hidden="true" tabindex="-1"></a>    msg, flag <span class="op">=</span> unpadding(<span class="bu">bytes</span>(msg_after_padding))</span><span id="cb5-54"><a href="#cb5-54" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> flag <span class="op">==</span> <span class="va">False</span>:</span><span id="cb5-55"><a href="#cb5-55" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">None</span></span><span id="cb5-56"><a href="#cb5-56" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> msg</span><span id="cb5-57"><a href="#cb5-57" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-58"><a href="#cb5-58" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-59"><a href="#cb5-59" aria-hidden="true" tabindex="-1"></a>msg <span class="op">=</span> os.urandom(random.randint(<span class="dv">1</span>,<span class="dv">15</span>))</span><span id="cb5-60"><a href="#cb5-60" aria-hidden="true" tabindex="-1"></a>key <span class="op">=</span> os.urandom(<span class="dv">16</span>)</span><span id="cb5-61"><a href="#cb5-61" aria-hidden="true" tabindex="-1"></a>iv <span class="op">=</span> os.urandom(<span class="dv">16</span>)</span><span id="cb5-62"><a href="#cb5-62" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(msg)</span><span id="cb5-63"><a href="#cb5-63" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-64"><a href="#cb5-64" aria-hidden="true" tabindex="-1"></a><span class="co"># padding msg</span></span><span id="cb5-65"><a href="#cb5-65" aria-hidden="true" tabindex="-1"></a>msg_after_padding <span class="op">=</span> padding_to_16(msg)</span><span id="cb5-66"><a href="#cb5-66" aria-hidden="true" tabindex="-1"></a>msg_enc <span class="op">=</span> AES_CBC_enc(msg_after_padding, key, iv)</span><span id="cb5-67"><a href="#cb5-67" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-68"><a href="#cb5-68" aria-hidden="true" tabindex="-1"></a><span class="co"># padding_oracle_attack recover msg</span></span><span id="cb5-69"><a href="#cb5-69" aria-hidden="true" tabindex="-1"></a>msg <span class="op">=</span> padding_oracle_attack(msg_enc, key, iv)</span><span id="cb5-70"><a href="#cb5-70" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(msg)</span><span id="cb5-71"><a href="#cb5-71" aria-hidden="true" tabindex="-1"></a></span></code></pre></div><h2 id="本地复现">本地复现</h2><p>直接用题目源码开服务即可</p><div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>FLAG <span class="op">=</span> <span class="st">&#39;flag</span><span class="sc">&#123;test&#125;</span><span class="st">&#39;</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>KEY <span class="op">=</span> os.urandom(<span class="dv">16</span>)</span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>IV <span class="op">=</span> os.urandom(<span class="dv">16</span>)</span></code></pre></div><div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> pwn <span class="im">import</span> <span class="op">*</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> itertools</span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> copy <span class="im">import</span> deepcopy</span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> tqdm <span class="im">import</span> trange</span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> string <span class="im">import</span> ascii_letters, digits</span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> hashlib</span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> binascii</span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="co"># context.log_level = &quot;debug&quot;</span></span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> remote(<span class="st">&quot;127.0.0.1&quot;</span>, <span class="dv">10010</span>)</span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> get_proof():</span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>    p.recvuntil(<span class="st">b&quot;SHA256(XXXX + &quot;</span>)</span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>    last <span class="op">=</span> p.recvuntil(<span class="st">b&quot;):&quot;</span>, drop<span class="op">=</span><span class="va">True</span>)</span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>    shav <span class="op">=</span> p.recvline()[:<span class="op">-</span><span class="dv">1</span>]</span><span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&quot;last = </span><span class="sc">&#123;</span>last<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span><span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&quot;shav = </span><span class="sc">&#123;</span>shav<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span><span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> cont <span class="kw">in</span> itertools.product(ascii_letters <span class="op">+</span> digits, repeat<span class="op">=</span><span class="dv">4</span>):</span><span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>        cont <span class="op">=</span> <span class="st">&#39;&#39;</span>.join(cont).encode()</span><span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> hashlib.new(<span class="st">&quot;sha256&quot;</span>, cont <span class="op">+</span> last).hexdigest() <span class="op">==</span> shav.decode():</span><span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(cont)</span><span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span></span><span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>    p.sendlineafter(<span class="st">b&quot;Give Me XXXX:</span><span class="ch">\n</span><span class="st">&quot;</span>, cont)</span><span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a><span class="co"># unpadding and check padding characters</span></span><span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> unpadding(msg):</span><span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a>    padding <span class="op">=</span> msg[<span class="op">-</span><span class="dv">1</span>]</span><span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> padding <span class="op">==</span> <span class="dv">0</span>:</span><span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> msg, <span class="va">False</span></span><span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(padding):</span><span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> (msg[<span class="op">-</span>i<span class="op">-</span><span class="dv">1</span>] <span class="op">!=</span> padding):</span><span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> msg, <span class="va">False</span></span><span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> msg[:<span class="op">-</span>padding], <span class="va">True</span></span><span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> padding_oracle_attack(iv, c):</span><span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a>    solved_dec <span class="op">=</span> [<span class="dv">0</span>] <span class="op">*</span> <span class="dv">16</span></span><span id="cb7-41"><a href="#cb7-41" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i <span class="kw">in</span> trange(<span class="dv">16</span>):</span><span id="cb7-42"><a href="#cb7-42" aria-hidden="true" tabindex="-1"></a>        new_iv <span class="op">=</span> deepcopy(solved_dec)</span><span id="cb7-43"><a href="#cb7-43" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> i <span class="op">!=</span> <span class="dv">0</span>:</span><span id="cb7-44"><a href="#cb7-44" aria-hidden="true" tabindex="-1"></a>            new_iv[<span class="op">-</span>i:] <span class="op">=</span> xor(new_iv[<span class="op">-</span>i:], [i<span class="op">+</span><span class="dv">1</span>]<span class="op">*</span>i)</span><span id="cb7-45"><a href="#cb7-45" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> j <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">256</span>):</span><span id="cb7-46"><a href="#cb7-46" aria-hidden="true" tabindex="-1"></a>            new_iv[<span class="op">-</span>i<span class="op">-</span><span class="dv">1</span>] <span class="op">=</span> j</span><span id="cb7-47"><a href="#cb7-47" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-48"><a href="#cb7-48" aria-hidden="true" tabindex="-1"></a>            p.sendline(<span class="st">b&quot;2&quot;</span>)</span><span id="cb7-49"><a href="#cb7-49" aria-hidden="true" tabindex="-1"></a>            p.sendlineafter(<span class="st">b&quot;Please enter ciphertext:</span><span class="ch">\n</span><span class="st">&quot;</span>, (<span class="bu">bytes</span>(new_iv).<span class="bu">hex</span>() <span class="op">+</span> c.<span class="bu">hex</span>()).encode())</span><span id="cb7-50"><a href="#cb7-50" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> p.recvline() <span class="op">!=</span> <span class="st">b&quot;False</span><span class="ch">\n</span><span class="st">&quot;</span>:</span><span id="cb7-51"><a href="#cb7-51" aria-hidden="true" tabindex="-1"></a>                solved_dec[<span class="op">-</span>i<span class="op">-</span><span class="dv">1</span>] <span class="op">=</span> j <span class="op">^</span> (i<span class="op">+</span><span class="dv">1</span>)</span><span id="cb7-52"><a href="#cb7-52" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span></span><span id="cb7-53"><a href="#cb7-53" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-54"><a href="#cb7-54" aria-hidden="true" tabindex="-1"></a>    msg_after_padding <span class="op">=</span> xor(solved_dec, <span class="bu">bytearray</span>(iv))</span><span id="cb7-55"><a href="#cb7-55" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(msg_after_padding)</span><span id="cb7-56"><a href="#cb7-56" aria-hidden="true" tabindex="-1"></a>    msg, flag <span class="op">=</span> unpadding(<span class="bu">bytes</span>(msg_after_padding))</span><span id="cb7-57"><a href="#cb7-57" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> flag <span class="op">==</span> <span class="va">False</span>:</span><span id="cb7-58"><a href="#cb7-58" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">None</span></span><span id="cb7-59"><a href="#cb7-59" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> msg</span><span id="cb7-60"><a href="#cb7-60" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-61"><a href="#cb7-61" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-62"><a href="#cb7-62" aria-hidden="true" tabindex="-1"></a>get_proof()</span><span id="cb7-63"><a href="#cb7-63" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-64"><a href="#cb7-64" aria-hidden="true" tabindex="-1"></a>p.sendlineafter(<span class="st">b&quot;1. encrypt the flag</span><span class="ch">\n</span><span class="st">2. decrypt the flag</span><span class="ch">\n</span><span class="st">&quot;</span>, <span class="st">b&quot;1&quot;</span>)</span><span id="cb7-65"><a href="#cb7-65" aria-hidden="true" tabindex="-1"></a>iv_and_c <span class="op">=</span> binascii.unhexlify(p.recvline().decode()[<span class="dv">19</span>:<span class="op">-</span><span class="dv">1</span>])</span><span id="cb7-66"><a href="#cb7-66" aria-hidden="true" tabindex="-1"></a>iv, c <span class="op">=</span> iv_and_c[:<span class="dv">16</span>], iv_and_c[<span class="dv">16</span>:]</span><span id="cb7-67"><a href="#cb7-67" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;iv = </span><span class="sc">&#123;</span>iv<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span><span id="cb7-68"><a href="#cb7-68" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;c = </span><span class="sc">&#123;</span>c<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span><span id="cb7-69"><a href="#cb7-69" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-70"><a href="#cb7-70" aria-hidden="true" tabindex="-1"></a>msg <span class="op">=</span> padding_oracle_attack(iv, c)</span><span id="cb7-71"><a href="#cb7-71" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(msg)</span><span id="cb7-72"><a href="#cb7-72" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-73"><a href="#cb7-73" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span><span id="cb7-74"><a href="#cb7-74" aria-hidden="true" tabindex="-1"></a><span class="co">last = b&#39;OfBypjLi4BizYvHW&#39;</span></span><span id="cb7-75"><a href="#cb7-75" aria-hidden="true" tabindex="-1"></a><span class="co">shav = b&#39;c0786d83da7177ab64ac113343ad157e4a7784998fb2be1ff84ab1e378499375&#39;</span></span><span id="cb7-76"><a href="#cb7-76" aria-hidden="true" tabindex="-1"></a><span class="co">b&#39;OTnk&#39;</span></span><span id="cb7-77"><a href="#cb7-77" aria-hidden="true" tabindex="-1"></a><span class="co">iv = b&#39;`</span><span class="ch">\xb9\x9c\xa7</span><span class="co">K&gt;SfC|</span><span class="ch">\xab</span><span class="co">z</span><span class="ch">\x8b</span><span class="co">*</span><span class="ch">\x00</span><span class="co">`&#39;</span></span><span id="cb7-78"><a href="#cb7-78" aria-hidden="true" tabindex="-1"></a><span class="co">c = b&#39;#</span><span class="ch">\xad\xfd\x84</span><span class="co">m</span><span class="ch">\x16</span><span class="co">F</span><span class="ch">\x17\xc3\xc9</span><span class="co">s</span><span class="ch">\xce\x02\x86\x04\x88</span><span class="co">&#39;</span></span><span id="cb7-79"><a href="#cb7-79" aria-hidden="true" tabindex="-1"></a><span class="co">100%|██████████| 16/16 [00:00&lt;00:00, 51.35it/s]</span></span><span id="cb7-80"><a href="#cb7-80" aria-hidden="true" tabindex="-1"></a><span class="co">b&#39;Obflag&#123;test&#125;</span><span class="ch">\x04\x04\x04\x04</span><span class="co">&#39;</span></span><span id="cb7-81"><a href="#cb7-81" aria-hidden="true" tabindex="-1"></a><span class="co">b&#39;Obflag&#123;test&#125;&#39;</span></span><span id="cb7-82"><a href="#cb7-82" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AES </tag>
            
            <tag> Padding_Oracle_Attack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 强网杯 discrete_log</title>
      <link href="/2023/12/21/2023-%E5%BC%BA%E7%BD%91%E6%9D%AF-discrete-log/"/>
      <url>/2023/12/21/2023-%E5%BC%BA%E7%BD%91%E6%9D%AF-discrete-log/</url>
      
        <content type="html"><![CDATA[<h2 id="题目源码">题目源码</h2><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.Padding <span class="im">import</span> pad</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>flag <span class="op">=</span> <span class="st">&#39;flag</span><span class="sc">&#123;d3b07b0d416ebb&#125;</span><span class="st">&#39;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="cf">assert</span> <span class="bu">len</span>(flag) <span class="op">&lt;=</span> <span class="dv">45</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="cf">assert</span> flag.startswith(<span class="st">&#39;flag&#123;&#39;</span>)</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="cf">assert</span> flag.endswith(<span class="st">&#39;&#125;&#39;</span>)</span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>m <span class="op">=</span> bytes_to_long(pad(flag.encode(), <span class="dv">128</span>))</span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> <span class="bn">0xf6e82946a9e7657cebcd14018a314a33c48b80552169f3069923d49c301f8dbfc6a1ca82902fc99a9e8aff92cef927e8695baeba694ad79b309af3b6a190514cb6bfa98bbda651f9dc8f80d8490a47e8b7b22ba32dd5f24fd7ee058b4f6659726b9ac50c8a7f97c3c4a48f830bc2767a15c16fe28a9b9f4ca3949ab6eb2e53c3</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>g <span class="op">=</span> <span class="dv">5</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="cf">assert</span> m <span class="op">&lt;</span> (p <span class="op">-</span> <span class="dv">1</span>)</span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>c <span class="op">=</span> <span class="bu">pow</span>(g, m, p)</span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> <span class="bu">open</span>(<span class="st">&#39;out.txt&#39;</span>, <span class="st">&#39;w&#39;</span>) <span class="im">as</span> f:</span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&quot;</span><span class="sc">&#123;</span>p <span class="op">=</span> <span class="sc">&#125;</span><span class="ss">&quot;</span>, <span class="bu">file</span><span class="op">=</span>f)</span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&quot;</span><span class="sc">&#123;</span>g <span class="op">=</span> <span class="sc">&#125;</span><span class="ss">&quot;</span>, <span class="bu">file</span><span class="op">=</span>f)</span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&quot;</span><span class="sc">&#123;</span>c <span class="op">=</span> <span class="sc">&#125;</span><span class="ss">&quot;</span>, <span class="bu">file</span><span class="op">=</span>f)</span></code></pre></div><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> <span class="dv">173383907346370188246634353442514171630882212643019826706575120637048836061602034776136960080336351252616860522273644431927909101923807914940397420063587913080793842100264484222211278105783220210128152062330954876427406484701993115395306434064667136148361558851998019806319799444970703714594938822660931343299</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>g <span class="op">=</span> <span class="dv">5</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>c <span class="op">=</span> <span class="dv">105956730578629949992232286714779776923846577007389446302378719229216496867835280661431342821159505656015790792811649783966417989318584221840008436316642333656736724414761508478750342102083967959048112859470526771487533503436337125728018422740023680376681927932966058904269005466550073181194896860353202252854</span></span></code></pre></div><h2 id="分析">分析</h2><p>离散对数问题，flag填充到128长度，但是flag长度未知</p><p>比赛的时候以为给的假flag是flag的高位，赛后得知flag里面的长度是12，可能是根据爆破难度来<strong>推测长度</strong>的，因为用到了bsgs法，相当于<strong>爆6位的[0-9a-f]</strong>，再长一点就很难爆破了</p><p>得知flag长度后，我们把同余式转化成 <span class="math inline">\(c\equiv g^{flag} \mod{p}\)</span> 的形式，方便最后进行bsgs</p><h3 id="同余式转化">同余式转化</h3><h4 id="第一步">第一步</h4><p>将flag头尾和padding先移到c那边，得到c1，因为<code>padding+'&#125;'</code>的长度是111，此时有<span class="math inline">\(c_1 \equiv (g^{flag})^{2^{111 \times 8}}\mod{p}\)</span>（这里以及后面说的flag都是指flag花括号里的内容）</p><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>flag_pattern <span class="op">=</span> bytes_to_long(pad(<span class="st">b&quot;flag&#123;&quot;</span> <span class="op">+</span> <span class="st">b&quot;</span><span class="ch">\x00</span><span class="st">&quot;</span> <span class="op">*</span> <span class="dv">12</span> <span class="op">+</span> <span class="st">b&quot;&#125;&quot;</span>, <span class="dv">128</span>))</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>c1 <span class="op">=</span> c <span class="op">*</span> <span class="bu">pow</span>(g, <span class="op">-</span>flag_pattern, p) <span class="op">%</span> p</span></code></pre></div><h4 id="第二步">第二步</h4><p>令 <span class="math inline">\(g_1 = g^{2^{111 \times8}}\)</span>，有 <span class="math inline">\(c_1 \equiv g_1^{flag}\mod{p}\)</span></p><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>g1 <span class="op">=</span> <span class="bu">pow</span>(g, <span class="dv">2</span><span class="op">**</span>(<span class="dv">111</span><span class="op">*</span><span class="dv">8</span>), p)</span></code></pre></div><p>这里还有一种做法，就是把 <span class="math inline">\(2^{111 \times8}\)</span> 也移到c那边，因为这个 <span class="math inline">\(p\ \%\ 4 =3\)</span>，可以用到Rabin里的思想</p><div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="cf">assert</span> p <span class="op">%</span> <span class="dv">4</span> <span class="op">==</span> <span class="dv">3</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">111</span><span class="op">*</span><span class="dv">8</span>):</span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    c1 <span class="op">=</span> <span class="bu">pow</span>(c1, (p<span class="op">+</span><span class="dv">1</span>)<span class="op">//</span><span class="dv">4</span>, p)</span></code></pre></div><p>这样，就有 <span class="math inline">\(c_1 \equiv g^{flag}\mod{p}\)</span>，也就是说后面的步骤直接用<code>g = 5</code></p><p>但是经过尝试，发现用g和用g1的爆破速度基本一样，所以不如<strong>直接用g1</strong></p><h3 id="bsgs">BSGS</h3><p>根据大步小步法，因为flag长度是12，令 <span class="math inline">\(flag= im + j\)</span>，其中 <span class="math inline">\(m = 2^{6 \times8}\)</span>，<span class="math inline">\(0 &lt; i &lt; m\)</span>，<span class="math inline">\(0 &lt; j &lt; m\)</span></p><p>因为 <span class="math inline">\(c_1 \equiv g_1^{flag} \equiv g_1^{im+ j} \mod{p}\)</span>，有 <span class="math inline">\(c_1 (g_1^{-m})^i\equiv g_1^j \mod{p}\)</span></p><h4 id="大步">大步</h4><p>左边先乘c1，然后每次乘上<strong>n次</strong>的<span class="math inline">\(g_1^{-m}\)</span>（这里写n次是因为flag的字符只有[0-9a-f]，遍历的时候存在“跳跃”，所以<strong>n不一定为1</strong>）</p><p>遍历完所有结果存进字典dic中</p><div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>g1m_inv <span class="op">=</span> <span class="bu">pow</span>(g1, <span class="op">-</span><span class="dv">2</span><span class="op">**</span>(<span class="dv">6</span><span class="op">*</span><span class="dv">8</span>), p)</span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>left <span class="op">=</span> c1</span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> tqdm(<span class="bu">range</span>(<span class="bu">len</span>(flag))):</span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    left <span class="op">=</span> left <span class="op">*</span> <span class="bu">pow</span>(g1m_inv, bflag[i<span class="op">+</span><span class="dv">1</span>] <span class="op">-</span> bflag[i], p) <span class="op">%</span> p</span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    dic[left] <span class="op">=</span> i</span></code></pre></div><h4 id="小步">小步</h4><p>右边每次乘上<strong>n次</strong>的<span class="math inline">\(g_1\)</span></p><p>每次乘完得到的值判断是否在dic中，如果存在，即<code>left = right</code>，说明找到了正确的i、j</p><div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>right <span class="op">=</span> <span class="dv">1</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> j <span class="kw">in</span> tqdm(<span class="bu">range</span>(<span class="bu">len</span>(flag))):</span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    right <span class="op">=</span> right <span class="op">*</span> <span class="bu">pow</span>(g1, bflag[j<span class="op">+</span><span class="dv">1</span>] <span class="op">-</span> bflag[j], p) <span class="op">%</span> p</span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> right <span class="kw">in</span> dic.keys():</span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        i <span class="op">=</span> dic[right]</span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(i, j)</span></code></pre></div><h2 id="解题">解题</h2><div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> itertools</span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.Padding <span class="im">import</span> pad</span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> tqdm <span class="im">import</span> tqdm</span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> <span class="dv">173383907346370188246634353442514171630882212643019826706575120637048836061602034776136960080336351252616860522273644431927909101923807914940397420063587913080793842100264484222211278105783220210128152062330954876427406484701993115395306434064667136148361558851998019806319799444970703714594938822660931343299</span></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>g <span class="op">=</span> <span class="dv">5</span></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>c <span class="op">=</span> <span class="dv">105956730578629949992232286714779776923846577007389446302378719229216496867835280661431342821159505656015790792811649783966417989318584221840008436316642333656736724414761508478750342102083967959048112859470526771487533503436337125728018422740023680376681927932966058904269005466550073181194896860353202252854</span></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>flag_pattern <span class="op">=</span> bytes_to_long(pad(<span class="st">b&quot;flag&#123;&quot;</span> <span class="op">+</span> <span class="st">b&quot;</span><span class="ch">\x00</span><span class="st">&quot;</span> <span class="op">*</span> <span class="dv">12</span> <span class="op">+</span> <span class="st">b&quot;&#125;&quot;</span>, <span class="dv">128</span>))</span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>c1 <span class="op">=</span> c <span class="op">*</span> <span class="bu">pow</span>(g, <span class="op">-</span>flag_pattern, p) <span class="op">%</span> p</span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>g1 <span class="op">=</span> <span class="bu">pow</span>(g, <span class="dv">2</span><span class="op">**</span>(<span class="dv">111</span><span class="op">*</span><span class="dv">8</span>), p)</span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>dic <span class="op">=</span> &#123;&#125;</span><span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>flag <span class="op">=</span> <span class="bu">list</span>(itertools.product(<span class="st">&quot;0123456789abcdef&quot;</span>, repeat<span class="op">=</span><span class="dv">6</span>))</span><span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>bflag <span class="op">=</span> [<span class="dv">0</span>] <span class="op">+</span> [bytes_to_long(<span class="st">&quot;&quot;</span>.join(_).encode()) <span class="cf">for</span> _ <span class="kw">in</span> flag]</span><span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>g1m_inv <span class="op">=</span> <span class="bu">pow</span>(g1, <span class="op">-</span><span class="dv">2</span><span class="op">**</span>(<span class="dv">6</span><span class="op">*</span><span class="dv">8</span>), p)</span><span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>left <span class="op">=</span> c1</span><span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> tqdm(<span class="bu">range</span>(<span class="bu">len</span>(flag))):</span><span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>    left <span class="op">=</span> left <span class="op">*</span> <span class="bu">pow</span>(g1m_inv, bflag[i<span class="op">+</span><span class="dv">1</span>] <span class="op">-</span> bflag[i], p) <span class="op">%</span> p</span><span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>    dic[left] <span class="op">=</span> i</span><span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>right <span class="op">=</span> <span class="dv">1</span></span><span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> j <span class="kw">in</span> tqdm(<span class="bu">range</span>(<span class="bu">len</span>(flag))):</span><span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>    right <span class="op">=</span> right <span class="op">*</span> <span class="bu">pow</span>(g1, bflag[j<span class="op">+</span><span class="dv">1</span>] <span class="op">-</span> bflag[j], p) <span class="op">%</span> p</span><span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> right <span class="kw">in</span> dic.keys():</span><span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>        i <span class="op">=</span> dic[right]</span><span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(i, j)  <span class="co"># 6416384 8246879</span></span><span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;&quot;</span>.join(flag[i] <span class="op">+</span> flag[j]))  <span class="co"># 61e8007dd65f</span></span><span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-33"><a href="#cb8-33" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span><span id="cb8-34"><a href="#cb8-34" aria-hidden="true" tabindex="-1"></a><span class="co">100%|██████████| 16777216/16777216 [01:48&lt;00:00, 154175.60it/s]</span></span><span id="cb8-35"><a href="#cb8-35" aria-hidden="true" tabindex="-1"></a><span class="co"> 49%|████▉     | 8244395/16777216 [00:52&lt;00:54, 155872.85it/s]6416384 8246879</span></span><span id="cb8-36"><a href="#cb8-36" aria-hidden="true" tabindex="-1"></a><span class="co">61e8007dd65f</span></span><span id="cb8-37"><a href="#cb8-37" aria-hidden="true" tabindex="-1"></a><span class="co">100%|██████████| 16777216/16777216 [01:47&lt;00:00, 156349.35it/s]</span></span><span id="cb8-38"><a href="#cb8-38" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DLP </tag>
            
            <tag> BSGS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA-p^q</title>
      <link href="/2023/11/30/RSA-p-q/"/>
      <url>/2023/11/30/RSA-p-q/</url>
      
        <content type="html"><![CDATA[<p>在近几个月的比赛里，经常遇见给出 <span class="math inline">\(p \oplusq\)</span> 的题型，在此总结一下。</p><p>核心思路就是对p、q逐位进行<strong>剪枝</strong>爆破，从高到低或者从低到高都可以（根据题目自行选择），并加上以下约束条件：</p><ol type="1"><li><p><span class="math inline">\(leak = p \oplusq\)</span>，p、q每个二进制位之间的关系都可以根据异或值来调整。</p></li><li><p>如果<strong>从高位开始</strong>，当定下了p、q的高位，如果低位全部补0，<span class="math inline">\(pq &lt; n\)</span>；全部补1，<span class="math inline">\(pq &gt; n\)</span>。</p><p>如果<strong>从低位开始</strong>，p、q的低位应满足 <span class="math inline">\(p_{low} \times q_{low} \equiv n\mod{2^i}\)</span>，其中i是指低位的位数。</p></li></ol><p>注意：一般来说，用从高到低的方法能算出唯一解；而用从低到高的方法可能算出一大堆解，所以还要加个<code>n % p</code>来判断。</p><p>核心函数<code>pq_high_xor</code>和<code>pq_low_xor</code>如下：</p><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> pq_high_xor(p<span class="op">=</span><span class="st">&quot;&quot;</span>, q<span class="op">=</span><span class="st">&quot;&quot;</span>):</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    lp, lq <span class="op">=</span> <span class="bu">len</span>(p), <span class="bu">len</span>(q)</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    tp0 <span class="op">=</span> <span class="bu">int</span>(p <span class="op">+</span> (<span class="dv">512</span><span class="op">-</span>lp) <span class="op">*</span> <span class="st">&quot;0&quot;</span>, <span class="dv">2</span>)</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    tq0 <span class="op">=</span> <span class="bu">int</span>(q <span class="op">+</span> (<span class="dv">512</span><span class="op">-</span>lq) <span class="op">*</span> <span class="st">&quot;0&quot;</span>, <span class="dv">2</span>)</span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    tp1 <span class="op">=</span> <span class="bu">int</span>(p <span class="op">+</span> (<span class="dv">512</span><span class="op">-</span>lp) <span class="op">*</span> <span class="st">&quot;1&quot;</span>, <span class="dv">2</span>)</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    tq1 <span class="op">=</span> <span class="bu">int</span>(q <span class="op">+</span> (<span class="dv">512</span><span class="op">-</span>lq) <span class="op">*</span> <span class="st">&quot;1&quot;</span>, <span class="dv">2</span>)</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> tp0 <span class="op">*</span> tq0 <span class="op">&gt;</span> n <span class="kw">or</span> tp1 <span class="op">*</span> tq1 <span class="op">&lt;</span> n:</span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> lp <span class="op">==</span> leak_bits:</span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        pq.append(tp0)</span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> xor[lp] <span class="op">==</span> <span class="st">&quot;1&quot;</span>:</span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        pq_high_xor(p <span class="op">+</span> <span class="st">&quot;0&quot;</span>, q <span class="op">+</span> <span class="st">&quot;1&quot;</span>)</span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>        pq_high_xor(p <span class="op">+</span> <span class="st">&quot;1&quot;</span>, q <span class="op">+</span> <span class="st">&quot;0&quot;</span>)</span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>        pq_high_xor(p <span class="op">+</span> <span class="st">&quot;0&quot;</span>, q <span class="op">+</span> <span class="st">&quot;0&quot;</span>)</span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>        pq_high_xor(p <span class="op">+</span> <span class="st">&quot;1&quot;</span>, q <span class="op">+</span> <span class="st">&quot;1&quot;</span>)</span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> pq_low_xor(p<span class="op">=</span><span class="st">&quot;&quot;</span>, q<span class="op">=</span><span class="st">&quot;&quot;</span>):</span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>    lp, lq <span class="op">=</span> <span class="bu">len</span>(p), <span class="bu">len</span>(q)</span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    tp <span class="op">=</span> <span class="bu">int</span>(p, <span class="dv">2</span>) <span class="cf">if</span> p <span class="cf">else</span> <span class="dv">0</span></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    tq <span class="op">=</span> <span class="bu">int</span>(q, <span class="dv">2</span>) <span class="cf">if</span> q <span class="cf">else</span> <span class="dv">0</span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> tp <span class="op">*</span> tq <span class="op">%</span> <span class="dv">2</span><span class="op">**</span>lp <span class="op">!=</span> n <span class="op">%</span> <span class="dv">2</span><span class="op">**</span>lp:</span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> lp <span class="op">==</span> leak_bits:</span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>        pq.append(tp)</span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> xor[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;1&quot;</span>:</span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>        pq_low_xor(<span class="st">&quot;0&quot;</span> <span class="op">+</span> p, <span class="st">&quot;1&quot;</span> <span class="op">+</span> q)</span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>        pq_low_xor(<span class="st">&quot;1&quot;</span> <span class="op">+</span> p, <span class="st">&quot;0&quot;</span> <span class="op">+</span> q)</span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>        pq_low_xor(<span class="st">&quot;0&quot;</span> <span class="op">+</span> p, <span class="st">&quot;0&quot;</span> <span class="op">+</span> q)</span><span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>        pq_low_xor(<span class="st">&quot;1&quot;</span> <span class="op">+</span> p, <span class="st">&quot;1&quot;</span> <span class="op">+</span> q)</span></code></pre></div><h2 id="leak-p-oplus-q"><span class="math inline">\(leak = p \oplusq\)</span></h2><h3 id="题目源码">题目源码</h3><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>q <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> p <span class="op">*</span> q</span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>leak <span class="op">=</span> p <span class="op">^</span> q</span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;n = </span><span class="sc">&#123;</span>n<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;leak = </span><span class="sc">&#123;</span>leak<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span></code></pre></div><h3 id="分析">分析</h3><p>p、q直接异或，因为p、q的高1位肯定是1，所以异或后的leak肯定没有512位，为了方便使用脚本，可以用<code>zfill</code>在前面补0</p><h3 id="解法一">解法一</h3><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>leak_bits <span class="op">=</span> <span class="dv">512</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>xor <span class="op">=</span> <span class="bu">bin</span>(leak)[<span class="dv">2</span>:].zfill(<span class="dv">512</span>)</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>pq <span class="op">=</span> []</span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>pq_high_xor()</span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(pq)</span></code></pre></div><h3 id="解法二">解法二</h3><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>leak_bits <span class="op">=</span> <span class="dv">512</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>xor <span class="op">=</span> <span class="bu">bin</span>(leak)[<span class="dv">2</span>:].zfill(<span class="dv">512</span>)</span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>pq <span class="op">=</span> []</span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>pq_low_xor()</span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="co"># print(pq)</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> p <span class="kw">in</span> pq:</span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> n <span class="op">%</span> p <span class="op">==</span> <span class="dv">0</span>:</span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(p)</span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">break</span></span></code></pre></div><h2 id="leak-p-oplus-q-16"><span class="math inline">\(leak = p \oplus(q &gt;&gt; 16)\)</span></h2><h3 id="题目源码-1">题目源码</h3><div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>q <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> p <span class="op">*</span> q</span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>leak <span class="op">=</span> p <span class="op">^</span> (q <span class="op">&gt;&gt;</span> <span class="dv">16</span>)</span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;n = </span><span class="sc">&#123;</span>n<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;leak = </span><span class="sc">&#123;</span>leak<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span></code></pre></div><h3 id="分析-1">分析</h3><p>p、q错位异或，这样处理后leak和p的高16位是相同的，直接传入leak的高16位作为初始的p。而且leak肯定是512位，这里就不需要补0了</p><h3 id="解题">解题</h3><div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>leak_bits <span class="op">=</span> <span class="dv">512</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>xor <span class="op">=</span> <span class="bu">bin</span>(leak)[<span class="dv">2</span>:]</span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>p_high_16 <span class="op">=</span> xor[:<span class="dv">16</span>]</span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>pq <span class="op">=</span> []</span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>pq_high_xor(p_high_16)</span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(pq)</span></code></pre></div><h2 id="leak-p-oplus-q-100"><span class="math inline">\(leak = (p \oplusq) &gt;&gt; 100\)</span></h2><h3 id="题目源码-2">题目源码</h3><div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>q <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> p <span class="op">*</span> q</span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>leak <span class="op">=</span> (p <span class="op">^</span> q) <span class="op">&gt;&gt;</span> <span class="dv">100</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;n = </span><span class="sc">&#123;</span>n<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;leak = </span><span class="sc">&#123;</span>leak<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span></code></pre></div><h3 id="分析-2">分析</h3><p>这个leak不全，少了低100位，这样解出来的p、q也会少了相应的位数，剩余位数用coppersmith恢复即可</p><h3 id="解题-1">解题</h3><div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>leak <span class="op">=</span> leak <span class="op">&lt;&lt;</span> <span class="dv">100</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>leak_bits <span class="op">=</span> <span class="dv">412</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>xor <span class="op">=</span> <span class="bu">bin</span>(leak)[<span class="dv">2</span>:].zfill(<span class="dv">512</span>)</span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>pq <span class="op">=</span> []</span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>pq_high_xor()</span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="co"># print(pq)</span></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> p_high <span class="kw">in</span> pq:</span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    x <span class="op">=</span> PolynomialRing(Zmod(n), <span class="st">&#39;x&#39;</span>).gen()</span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    f <span class="op">=</span> p_high <span class="op">+</span> x</span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>    res <span class="op">=</span> f.monic().small_roots(X<span class="op">=</span><span class="dv">2</span><span class="op">**</span><span class="dv">100</span>, beta<span class="op">=</span><span class="fl">0.4</span>)</span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> res:</span><span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>        p <span class="op">=</span> <span class="bu">int</span>(f(res[<span class="dv">0</span>]))</span><span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(p)</span><span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>        <span class="cf">break</span></span></code></pre></div><h2 id="leak-p-oplus-q-2412"><span class="math inline">\(leak = (p\oplus q)\ \%\ 2^{412}\)</span></h2><h3 id="题目源码-3">题目源码</h3><div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>q <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> p <span class="op">*</span> q</span><span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>leak <span class="op">=</span> (p <span class="op">^</span> q) <span class="op">%</span> <span class="dv">2</span><span class="op">**</span><span class="dv">412</span></span><span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;n = </span><span class="sc">&#123;</span>n<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span><span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;leak = </span><span class="sc">&#123;</span>leak<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span></code></pre></div><h3 id="分析-3">分析</h3><p>少了高100位，用coppersmith恢复</p><h3 id="解题-2">解题</h3><div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>leak_bits <span class="op">=</span> <span class="dv">412</span></span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>xor <span class="op">=</span> <span class="bu">bin</span>(leak)[<span class="dv">2</span>:].zfill(<span class="dv">412</span>)</span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>pq <span class="op">=</span> []</span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>pq_low_xor()</span><span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="co"># print(pq)</span></span><span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> p_low <span class="kw">in</span> pq:</span><span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>    x <span class="op">=</span> PolynomialRing(Zmod(n), <span class="st">&#39;x&#39;</span>).gen()</span><span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>    f <span class="op">=</span> x <span class="op">*</span> <span class="dv">2</span><span class="op">**</span><span class="dv">412</span> <span class="op">+</span> p_low</span><span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>    res <span class="op">=</span> f.monic().small_roots(X<span class="op">=</span><span class="dv">2</span><span class="op">**</span><span class="dv">100</span>, beta<span class="op">=</span><span class="fl">0.4</span>)</span><span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> res:</span><span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>        p <span class="op">=</span> <span class="bu">int</span>(f(res[<span class="dv">0</span>]))</span><span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> n <span class="op">%</span> p <span class="op">==</span> <span class="dv">0</span>:</span><span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(p)</span><span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span></span></code></pre></div><h2 id="leak-p-oplus-q-8-2504-100"><span class="math inline">\(leak = (p\oplus (q &gt;&gt; 8))\ \%\ 2^{504} &gt;&gt; 100\)</span></h2><h3 id="题目源码-4">题目源码</h3><div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>q <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> p <span class="op">*</span> q</span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>leak <span class="op">=</span> (p <span class="op">^</span> (q <span class="op">&gt;&gt;</span> <span class="dv">8</span>)) <span class="op">%</span> <span class="dv">2</span><span class="op">**</span><span class="dv">504</span> <span class="op">&gt;&gt;</span> <span class="dv">100</span></span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;n = </span><span class="sc">&#123;</span>n<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span><span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;leak = </span><span class="sc">&#123;</span>leak<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span></code></pre></div><h3 id="分析-4">分析</h3><p>q有偏移，并且删去了p的高8位，所以需要爆破这8位，然后用coppersmith恢复低位</p><h3 id="解题-3">解题</h3><div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>leak <span class="op">=</span> leak <span class="op">&lt;&lt;</span> <span class="dv">100</span></span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>leak_bits <span class="op">=</span> <span class="dv">412</span></span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">2</span><span class="op">**</span><span class="dv">7</span>, <span class="dv">2</span><span class="op">**</span><span class="dv">8</span>):  <span class="co"># 爆破 p 的高位</span></span><span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    p_high_8 <span class="op">=</span> <span class="bu">bin</span>(i)[<span class="dv">2</span>:]</span><span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>    xor <span class="op">=</span> p_high_8 <span class="op">+</span> <span class="bu">bin</span>(leak)[<span class="dv">2</span>:].zfill(<span class="dv">512</span><span class="op">-</span><span class="dv">8</span>)</span><span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>    pq <span class="op">=</span> []</span><span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>    pq_high_xor(p_high_8)</span><span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>    <span class="co"># print(pq)</span></span><span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> p_high <span class="kw">in</span> pq:</span><span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>        x <span class="op">=</span> PolynomialRing(Zmod(n), <span class="st">&#39;x&#39;</span>).gen()</span><span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>        f <span class="op">=</span> p_high <span class="op">+</span> x</span><span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>        res <span class="op">=</span> f.monic().small_roots(X<span class="op">=</span><span class="dv">2</span><span class="op">**</span><span class="dv">100</span>, beta<span class="op">=</span><span class="fl">0.4</span>)</span><span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> res:</span><span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a>            p <span class="op">=</span> <span class="bu">int</span>(f(res[<span class="dv">0</span>]))</span><span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(p)</span><span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a>            exit()</span></code></pre></div><h2 id="leak-p-oplus-q-8-2412"><span class="math inline">\(leak = (p\oplus (q &gt;&gt; 8))\ \%\ 2^{412}\)</span></h2><h3 id="题目源码-5">题目源码</h3><div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>q <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> p <span class="op">*</span> q</span><span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>leak <span class="op">=</span> (p <span class="op">^</span> (q <span class="op">&gt;&gt;</span> <span class="dv">8</span>)) <span class="op">%</span> <span class="dv">2</span><span class="op">**</span><span class="dv">412</span></span><span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;n = </span><span class="sc">&#123;</span>n<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span><span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;leak = </span><span class="sc">&#123;</span>leak<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span></code></pre></div><h3 id="分析-5">分析</h3><p>因为只泄露了低位，采用从低到高的方法，但是q有偏移，需要爆破q的低8位，同时<code>pq_low_xor</code>函数也要改一改剪枝条件</p><h3 id="解题-4">解题</h3><div class="sourceCode" id="cb14"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> pq_low_xor(p<span class="op">=</span><span class="st">&quot;&quot;</span>, q<span class="op">=</span><span class="st">&quot;&quot;</span>):</span><span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    lp, lq <span class="op">=</span> <span class="bu">len</span>(p), <span class="bu">len</span>(q)</span><span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    tp <span class="op">=</span> <span class="bu">int</span>(p, <span class="dv">2</span>) <span class="cf">if</span> p <span class="cf">else</span> <span class="dv">0</span></span><span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    tq <span class="op">=</span> <span class="bu">int</span>(q, <span class="dv">2</span>) <span class="cf">if</span> q <span class="cf">else</span> <span class="dv">0</span></span><span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>    <span class="co"># if tp * tq % 2**lp != n % 2**lp:</span></span><span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>        <span class="co"># return</span></span><span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> tp <span class="op">*</span> (tq<span class="op">%</span>(<span class="dv">2</span><span class="op">**</span>lp)) <span class="op">%</span> <span class="dv">2</span><span class="op">**</span>lp <span class="op">!=</span> n <span class="op">%</span> <span class="dv">2</span><span class="op">**</span>lp:</span><span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span><span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>    <span class="co"># if lp == leak_bits:</span></span><span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>        <span class="co"># pq.append(tp)</span></span><span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>        <span class="co"># return</span></span><span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> lq <span class="op">==</span> leak_bits:  <span class="co"># lp &lt; lq</span></span><span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>        pq.append(tq)</span><span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span><span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> xor[<span class="op">-</span>lp<span class="op">-</span><span class="dv">1</span>] <span class="op">==</span> <span class="st">&quot;1&quot;</span>:</span><span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a>        pq_low_xor(<span class="st">&quot;0&quot;</span> <span class="op">+</span> p, <span class="st">&quot;1&quot;</span> <span class="op">+</span> q)</span><span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>        pq_low_xor(<span class="st">&quot;1&quot;</span> <span class="op">+</span> p, <span class="st">&quot;0&quot;</span> <span class="op">+</span> q)</span><span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>        pq_low_xor(<span class="st">&quot;0&quot;</span> <span class="op">+</span> p, <span class="st">&quot;0&quot;</span> <span class="op">+</span> q)</span><span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a>        pq_low_xor(<span class="st">&quot;1&quot;</span> <span class="op">+</span> p, <span class="st">&quot;1&quot;</span> <span class="op">+</span> q)</span><span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a>leak_bits <span class="op">=</span> <span class="dv">412</span><span class="op">+</span><span class="dv">8</span></span><span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a>xor <span class="op">=</span> <span class="bu">bin</span>(leak)[<span class="dv">2</span>:].zfill(<span class="dv">412</span>)</span><span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-28"><a href="#cb14-28" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">2</span><span class="op">**</span><span class="dv">8</span>):  <span class="co"># 爆破 q 的低位</span></span><span id="cb14-29"><a href="#cb14-29" aria-hidden="true" tabindex="-1"></a>    q_low_8 <span class="op">=</span> <span class="bu">bin</span>(i)[<span class="dv">2</span>:].zfill(<span class="dv">8</span>)</span><span id="cb14-30"><a href="#cb14-30" aria-hidden="true" tabindex="-1"></a>    pq <span class="op">=</span> []</span><span id="cb14-31"><a href="#cb14-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-32"><a href="#cb14-32" aria-hidden="true" tabindex="-1"></a>    pq_low_xor(<span class="st">&quot;&quot;</span>, q_low_8)</span><span id="cb14-33"><a href="#cb14-33" aria-hidden="true" tabindex="-1"></a>    <span class="co"># print(pq)</span></span><span id="cb14-34"><a href="#cb14-34" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-35"><a href="#cb14-35" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> q_low <span class="kw">in</span> pq:</span><span id="cb14-36"><a href="#cb14-36" aria-hidden="true" tabindex="-1"></a>        x <span class="op">=</span> PolynomialRing(Zmod(n), <span class="st">&#39;x&#39;</span>).gen()</span><span id="cb14-37"><a href="#cb14-37" aria-hidden="true" tabindex="-1"></a>        f <span class="op">=</span> x <span class="op">*</span> <span class="dv">2</span><span class="op">**</span>(<span class="dv">412</span><span class="op">+</span><span class="dv">8</span>) <span class="op">+</span> q_low</span><span id="cb14-38"><a href="#cb14-38" aria-hidden="true" tabindex="-1"></a>        res <span class="op">=</span> f.monic().small_roots(X<span class="op">=</span><span class="dv">2</span><span class="op">**</span>(<span class="dv">100</span><span class="op">-</span><span class="dv">8</span>), beta<span class="op">=</span><span class="fl">0.4</span>)</span><span id="cb14-39"><a href="#cb14-39" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> res:</span><span id="cb14-40"><a href="#cb14-40" aria-hidden="true" tabindex="-1"></a>            q <span class="op">=</span> <span class="bu">int</span>(f(res[<span class="dv">0</span>]))</span><span id="cb14-41"><a href="#cb14-41" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> n <span class="op">%</span> q <span class="op">==</span> <span class="dv">0</span>:</span><span id="cb14-42"><a href="#cb14-42" aria-hidden="true" tabindex="-1"></a>                <span class="bu">print</span>(q)</span><span id="cb14-43"><a href="#cb14-43" aria-hidden="true" tabindex="-1"></a>                exit()</span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023 上海大学生网络安全赛 Twice</title>
      <link href="/2023/11/22/2023-%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9B-Twice/"/>
      <url>/2023/11/22/2023-%E4%B8%8A%E6%B5%B7%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%B5%9B-Twice/</url>
      
        <content type="html"><![CDATA[<h2 id="题目源码">题目源码</h2><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.Padding <span class="im">import</span> pad</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> secret <span class="im">import</span> flag, a0,a1,b0,b1</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> gen_keys(k):</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    p, q, r <span class="op">=</span> getPrime(k), getPrime(k), getPrime(k)</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    pubkey <span class="op">=</span> p<span class="op">**</span><span class="dv">2</span> <span class="op">*</span> q <span class="op">*</span> r</span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    n <span class="op">=</span> pubkey</span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    phi <span class="op">=</span> (p<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span> (q<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span> (r<span class="op">-</span><span class="dv">1</span>)</span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    privkey <span class="op">=</span> inverse(n, phi)</span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> pubkey, privkey</span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> encrypt(msg, pubkey):</span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="bu">pow</span>(bytes_to_long(pad(msg,<span class="dv">190</span>)), pubkey, pubkey)</span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>q <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>e <span class="op">=</span> getPrime(<span class="dv">128</span>)</span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>n1 <span class="op">=</span> p<span class="op">*</span>q</span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="cf">assert</span> <span class="bu">pow</span>(a0,<span class="dv">2</span>) <span class="op">+</span> e <span class="op">*</span> <span class="bu">pow</span>(b0,<span class="dv">2</span>) <span class="op">==</span> n1</span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="cf">assert</span> <span class="bu">pow</span>(a1,<span class="dv">2</span>) <span class="op">+</span> e <span class="op">*</span> <span class="bu">pow</span>(b1,<span class="dv">2</span>) <span class="op">==</span> n1</span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="co"># one</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>m <span class="op">=</span> bytes_to_long(flag)</span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>c1 <span class="op">=</span> <span class="bu">pow</span>(m, e, n1)</span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="co"># two</span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>pub,pri <span class="op">=</span> gen_keys(<span class="dv">512</span>)</span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>c2 <span class="op">=</span> encrypt(long_to_bytes(c1),pub)</span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;n1=&quot;</span>,n1)</span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;a0=&quot;</span>,a0)</span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;a1=&quot;</span>,a1)</span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;b0=&quot;</span>,b0)</span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;b1=&quot;</span>,b1)</span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;c2=&quot;</span>,c2)</span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;pub=&quot;</span>,pub)</span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;pri=&quot;</span>,pri)</span><span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;&#39;&#39;</span></span><span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a><span class="co">n1= 87665217778729524993118310155129480311708534438704150676980835344891979982717119161254489670350577173938239682286759779547789055360697960379769693294306641200724257991678505629369338313581657539655057636732714452287023658150014746541718058750871927050204352584824130972892779877896415568548748364583880371427</span></span><span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a><span class="co">a0= 9362970563807702423162361787386216886594085863490420184497563324865248429693287404341206766515622648778272030443641712923250846610046357375553046092690266</span></span><span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a><span class="co">a1= 9362970563807702423162361745963275441706212437133735476965289880825874017106479792816846422940594285630367772490647779230476318907092613021181772527068514</span></span><span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a><span class="co">b0= 74836747076024432741470938222753940689278814091833170112470104078475118700897724833941621360216319460657128947837095907483</span></span><span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a><span class="co">b1= 93520964011413593176393772179429258741894666938448164504029535235899813670669478849381259720656022408302270582527720184427</span></span><span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a><span class="co">c2= 7090659117351297531755883438960933877263181849815568437232708639999747137583085680350909771730266998763362206865224473283130982570816918537377058225538656521223617210560656370841094169187300346437355127376920626133248983100115455529533265136725274741407727211587363755394889303944789720637515498330115070515942678821608630620272575086220037432383957991049220528177053370450234486390431027269543481157974773863005279984438957464388749795275109730696430700744950555993640720758137888948464005039907816169108829675809911658280616090368129767282407708640291466242813209343944276906740181222776418701978734705056220412984</span></span><span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a><span class="co">pub= 15393634704241437811571407047965218207529278849238950329420499882359515149154462592674433680412129087082275102567406550543503710118161775213536183656910892279726520148202227312448507629264239427121015706092403872586978266402316447553116208411724407465368711586887621447872002364407809592953543797319646692321612541334341183378900324146713189121105760280994702695266049904020810024990537652609099294535255399210219454610583930829883737909993183476961897889084229322415995483397484414924734020539093114397393070394929656598174957126771887906087335882580049097369036955153036983424389092042285637185882327630117320615769</span></span><span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a><span class="co">pri= 424184707992085368727036634979681060339188016631126395371395132791009626692092220877797321952063158959159298372653275672949543326347146732580465753892335912633332743258010037527036987474957662424735475674152462914082526658466925646224968182493094690460023505421720259663381122409147914948696061450626153526908753546708693503710352787787701648821693599138777500334149879355898444355846028142814267511986218166066642222930494985736426837825122392760739011897554697</span></span><span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;&#39;&#39;</span></span></code></pre></div><h2 id="分析">分析</h2><h3 id="two">two</h3><p>为了方便分析，先做以下定义</p><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> p<span class="op">**</span><span class="dv">2</span> <span class="op">*</span> q <span class="op">*</span> r</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>phi <span class="op">=</span> p <span class="op">*</span> (p<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span> (q<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span> (r<span class="op">-</span><span class="dv">1</span>)</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>n_ <span class="op">=</span> p <span class="op">*</span> q <span class="op">*</span> r</span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>phi_ <span class="op">=</span> (p<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span> (q<span class="op">-</span><span class="dv">1</span>) <span class="op">*</span> (r<span class="op">-</span><span class="dv">1</span>)</span></code></pre></div><p><code>c = pow(m, n, n)</code>，n和phi不互素，所以解密的时候就不能直接用n和phi，得用n_和phi_，而phi_已经给出，所以我们只需根据<code>d = inverse(n, phi_)</code>来求n_</p><p><span class="math inline">\(nd \equiv 1 \mod{phi\_} \\ nd = 1 +k(p-1)(q-1)(r-1) \\ 2^{nd} = 2 \cdot 2^{k(p-1)(q-1)(r-1)} \\两边同时模n\_ \\ 2^{nd} \equiv 2 \cdot 2^{k(p-1)(q-1)(r-1)} \equiv 2\mod{n\_} \\ 2^{nd} - 2 = k_1 n\_ \\ n\_ = \gcd(k_1 n\_,\ n) \\ m = c^d\\%\ {n\_}\)</span></p><h3 id="one">one</h3><p>构造消去e</p><p><span class="math inline">\(\because \begin{cases} n = a_0^2 + eb_0^2 \\ n = a_1^2 + e b_1^2 \end{cases} \\ n b_0^2 - n b_1^2 = (a_1^2 +e b_1^2)b_0^2 - (a_0^2 + eb_0^2)b_1^2 = a_1^2 b_0^2 - a_0^2 b_1^2 = (a_1b_0 + a_0 b_1)(a_1 b_0 - a_0 b_1) \\ pq(b_0^2 - b_1^2) = (a_1 b_0 + a_0b_1)(a_1 b_0 - a_0 b_1) \\ p = \gcd(n,\ a_1 b_0 + a_0 b_1) \\ q =\gcd(n\ ,a_1 b_0 - a_0 b_1)\)</span></p><h2 id="解题">解题</h2><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.Padding <span class="im">import</span> pad,unpad</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>n1<span class="op">=</span> <span class="dv">87665217778729524993118310155129480311708534438704150676980835344891979982717119161254489670350577173938239682286759779547789055360697960379769693294306641200724257991678505629369338313581657539655057636732714452287023658150014746541718058750871927050204352584824130972892779877896415568548748364583880371427</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>a0<span class="op">=</span> <span class="dv">9362970563807702423162361787386216886594085863490420184497563324865248429693287404341206766515622648778272030443641712923250846610046357375553046092690266</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>a1<span class="op">=</span> <span class="dv">9362970563807702423162361745963275441706212437133735476965289880825874017106479792816846422940594285630367772490647779230476318907092613021181772527068514</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>b0<span class="op">=</span> <span class="dv">74836747076024432741470938222753940689278814091833170112470104078475118700897724833941621360216319460657128947837095907483</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>b1<span class="op">=</span> <span class="dv">93520964011413593176393772179429258741894666938448164504029535235899813670669478849381259720656022408302270582527720184427</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>c2<span class="op">=</span> <span class="dv">7090659117351297531755883438960933877263181849815568437232708639999747137583085680350909771730266998763362206865224473283130982570816918537377058225538656521223617210560656370841094169187300346437355127376920626133248983100115455529533265136725274741407727211587363755394889303944789720637515498330115070515942678821608630620272575086220037432383957991049220528177053370450234486390431027269543481157974773863005279984438957464388749795275109730696430700744950555993640720758137888948464005039907816169108829675809911658280616090368129767282407708640291466242813209343944276906740181222776418701978734705056220412984</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>pub<span class="op">=</span> <span class="dv">15393634704241437811571407047965218207529278849238950329420499882359515149154462592674433680412129087082275102567406550543503710118161775213536183656910892279726520148202227312448507629264239427121015706092403872586978266402316447553116208411724407465368711586887621447872002364407809592953543797319646692321612541334341183378900324146713189121105760280994702695266049904020810024990537652609099294535255399210219454610583930829883737909993183476961897889084229322415995483397484414924734020539093114397393070394929656598174957126771887906087335882580049097369036955153036983424389092042285637185882327630117320615769</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>pri<span class="op">=</span> <span class="dv">424184707992085368727036634979681060339188016631126395371395132791009626692092220877797321952063158959159298372653275672949543326347146732580465753892335912633332743258010037527036987474957662424735475674152462914082526658466925646224968182493094690460023505421720259663381122409147914948696061450626153526908753546708693503710352787787701648821693599138777500334149879355898444355846028142814267511986218166066642222930494985736426837825122392760739011897554697</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="co"># two</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> pub</span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>d <span class="op">=</span> pri</span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>n_ <span class="op">=</span> GCD(<span class="bu">pow</span>(<span class="dv">2</span>, n<span class="op">*</span>d, n) <span class="op">-</span> <span class="dv">2</span>, n)</span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>c1 <span class="op">=</span> bytes_to_long(unpad(long_to_bytes(<span class="bu">pow</span>(c2, d, n_)), <span class="dv">190</span>))</span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="co"># one</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> GCD(n1, a1<span class="op">*</span>b0<span class="op">+</span>a0<span class="op">*</span>b1)</span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>q <span class="op">=</span> n1 <span class="op">//</span> p</span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>e <span class="op">=</span> (n1 <span class="op">-</span> a0<span class="op">**</span><span class="dv">2</span>) <span class="op">//</span> b0<span class="op">**</span><span class="dv">2</span></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>d <span class="op">=</span> inverse(e, (p<span class="op">-</span><span class="dv">1</span>)<span class="op">*</span>(q<span class="op">-</span><span class="dv">1</span>))</span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(long_to_bytes(<span class="bu">pow</span>(c1, d, n1)))</span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a><span class="co"># b&#39;flag&#123;1a100d2c0dab19c4430e7d73762b3423&#125;&#39;</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA-leak</title>
      <link href="/2023/11/21/RSA-leak/"/>
      <url>/2023/11/21/RSA-leak/</url>
      
        <content type="html"><![CDATA[<p>这类问题比较好识别，一般会给一个leak，它和p、q之间有直接关系，解题的核心就是<strong>数学推导</strong>。</p><h2 id="常用性质和转化">常用性质和转化</h2><h3 id="同余的性质和运算">同余的性质和运算</h3><p><span class="math inline">\(\begin{cases} a \pm b \equiv a\ \%\ n \pmb\ \%\ n \mod{n} \\ a \times b \equiv a\ \%\ n \times b\ \%\ n \mod{n}\\ a^b \equiv (a\ \%\ n)^b \mod{n} \end{cases}\)</span></p><p>当 <span class="math inline">\(\begin{cases} a \equiv b \mod{n} \\ c≡ d \mod{n} \end{cases}\)</span>，有 <span class="math inline">\(\begin{cases} a \pm c \equiv b \pm d \mod{n} \\ a\times c ≡ b \times d \mod{n} \end{cases}\)</span></p><p>当 <span class="math inline">\(\begin{cases} ak \equiv bk \mod{n} \\\gcd(k,\ n) = 1 \end{cases}\)</span>，有 <span class="math inline">\(a\equiv b \mod{n}\)</span></p><p>当 <span class="math inline">\(a \equiv b \mod{n}\)</span>，</p><ol type="1"><li>若 <span class="math inline">\(k\)</span> 是正整数，有 <span class="math inline">\(ka \equiv kb \mod{kn}\)</span></li><li>若 <span class="math inline">\(k\)</span> 是 <span class="math inline">\(a,b,n\)</span> 的公因子，有 <span class="math inline">\(\frac{a}{k} \equiv \frac{b}{k}\mod{\frac{n}{k}}\)</span></li><li>若 <span class="math inline">\(p\ |\ n\)</span>，有 <span class="math inline">\(a \equiv b \mod{p}\)</span></li></ol><p>当 <span class="math inline">\(a \equiv b \mod{n_i}\ (i=1,\ 2,\\cdots,\ k)\)</span>，有 <span class="math inline">\(a \equiv b\mod{\operatorname{lcm}(n_1,\ n_2,\ \cdots,\ n_k)}\)</span></p><h3 id="欧拉定理">欧拉定理</h3><p>当 <span class="math inline">\(\gcd(a,\ n) = 1\)</span>，有 <span class="math inline">\(a^{\phi{n}} \equiv 1 \mod{n}\)</span></p><h3 id="费马小定理">费马小定理</h3><p>欧拉定理的一种特殊情况</p><p>当 <span class="math inline">\(\begin{cases} p是素数 \\ \gcd(a,\ p) =1 \end{cases}\)</span>，有 <span class="math inline">\(\begin{cases}a^{p-1} \equiv 1 \mod{p} \\ a^p \equiv a \mod{p}\end{cases}\)</span></p><h3 id="e和k">e和k</h3><p>设d是e模<span class="math inline">\(\phi{n}\)</span>的逆元，有 <span class="math inline">\(d &lt; \phi{n}\)</span>，又因为 <span class="math inline">\(ed = 1 + k \phi{n}\)</span>，所以 <span class="math inline">\(0 &lt; k &lt; e\)</span></p><p>有时候需要爆破k的大小</p><h2 id="题型总结">题型总结</h2><h3 id="leak-pq-qp-n"><span class="math inline">\(leak = (p^q + q^p)\\%\ n\)</span></h3><p><span class="math inline">\(leak \equiv p^q + q^p \mod{n} \\\begin{cases} leak \equiv p^q + q^p \equiv p \mod{q} \\ leak \equiv p^q+ q^p \equiv q \mod{p} \end{cases} \\ leak = p + k_{1}q = q + k_{2}p \\(k_{1}-1)q = (k_{2}-1)p \\ 解一 \begin{cases} k_{1} = 1 \\ k_{2} = 1\end{cases} \\ 解二 \begin{cases} k_{1} = k_{3}p+1 \\ k_{2} = k_{3}q + 1\end{cases} \\ \because leak &lt; n \\ \therefore 解二不成立 \\ 综上得\leak = p + q\)</span></p><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>p, q <span class="op">=</span> var(<span class="st">&#39;p q&#39;</span>)</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>seq <span class="op">=</span> [</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    leak <span class="op">==</span> p <span class="op">+</span> q,</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    n <span class="op">==</span> p <span class="op">*</span> q</span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>]</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(solve(seq, p, q))</span></code></pre></div><h3 id="leak-n-p-q---1-其中-p-q"><span class="math inline">\(leak = (n +p)\ \%\ (q - 1),\ 其中\ p &gt; q\)</span></h3><p><span class="math inline">\(leak \equiv n + p \equiv pq + p \equiv 2p\mod{q-1} \\ leak = 2p + k(p - 1) \\ \because \begin{cases} 0 &lt; leak&lt; p - 1 \\ p &gt; q \end{cases} \\ \therefore k = -2 \\ 综上得\ leak= 2(p - q + 1)\)</span></p><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>p, q <span class="op">=</span> var(<span class="st">&#39;p q&#39;</span>)</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>seq <span class="op">=</span> [</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    leak <span class="op">==</span> <span class="dv">2</span> <span class="op">*</span> (p <span class="op">-</span> q <span class="op">+</span> <span class="dv">1</span>),</span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    n <span class="op">==</span> p <span class="op">*</span> q</span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>]</span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(solve(seq, p, q))</span></code></pre></div><h3 id="leak-d-p-q"><span class="math inline">\(leak = d + p +q\)</span></h3><p><span class="math inline">\(\because \begin{cases} \phi{n} = n - (p +q) + 1 \\ h = d + (p + q) \\ ed = 1 + k \phi{n} \end{cases} \\ 联立得\\frac{ed - 1}{k} + h = n + d + 1 \\ ed - 1 = k(n + 1 - h) + kd \\ (e -k)d = k(n + 1 - h) + 1 \\ [k(n + 1 - h) + 1]\ \%\ (e - k) = 0 \\ 遍历\k\ 即可\)</span></p><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> k <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>, e):</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (k <span class="op">*</span> (n <span class="op">+</span> <span class="dv">1</span> <span class="op">-</span> leak) <span class="op">+</span> <span class="dv">1</span>) <span class="op">%</span> (e <span class="op">-</span> k) <span class="op">==</span> <span class="dv">0</span>:</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        d <span class="op">=</span> (k <span class="op">*</span> (n <span class="op">+</span> <span class="dv">1</span> <span class="op">-</span> leak) <span class="op">+</span> <span class="dv">1</span>) <span class="op">//</span> (e <span class="op">-</span> k)</span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        m <span class="op">=</span> <span class="bu">pow</span>(c, d, n)</span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(long_to_bytes(m))  <span class="co"># 解不唯一</span></span></code></pre></div><h3 id="leak_1-p-qe-n-leak_2-p-eq-n"><span class="math inline">\(leak_1= (p + q)^e\ \%\ n,\ leak_2 = (p + e)^q\ \%\ n\)</span></h3><p>出自：2020 巅峰极客 tryrsa</p><p><span class="math inline">\(leak_2 \equiv (p + e)^q \equiv p + e\mod{q} \\ p \equiv leak_2 - e \mod{q} \\ leak_1 \equiv (p + q)^e \equivp^e \equiv (leak_2 - e)^e \mod{q} \\ leak_1 - (leak_2 - e)^e = kq \\ q =\gcd(kq,\ n)\)</span></p><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>kq <span class="op">=</span> leak1 <span class="op">-</span> (leak2 <span class="op">-</span> e)<span class="op">**</span>e</span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>q <span class="op">=</span> gcd(kq, n)</span></code></pre></div><h3 id="leak_1-pe---qe-n-leak_2-p---qe-n"><span class="math inline">\(leak_1 = (p^e - q^e)\ \%\ n,\ leak_2 = (p - q)^e\\%\ n\)</span></h3><p><span class="math inline">\(leak2 \equiv (p - q)^e \equiv p^e +\cdots + q^e \equiv p^e + q^e \mod{n} \\ \because \begin{cases} leak_1\equiv p^e-q^e \mod{n} \\ leak_2 \equiv p^e+q^e \mod{n} \end{cases} \\leak_1 + leak_2 \equiv 2 p^e \mod{n} \\ leak_1 + leak_2 \equiv 0 \mod{p}\\ leak_1 + leak_2 = kp \\ p = \gcd(kp,\ n)\)</span></p><div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>kp <span class="op">=</span> leak1 <span class="op">+</span> leak2</span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> gcd(kp, n)</span></code></pre></div><h3 id="leak-2023q-231103p-n"><span class="math inline">\(leak = (2023q+ 231103)^p\ \%\ n\)</span></h3><p>出自：2023 一带一路暨金砖（决赛） Crypto2</p><p><span class="math inline">\(leak \equiv (2023q + 231103)^p \mod{n} \\leak \equiv 231103^p \mod{q} \\ 两边同乘\ 231103^{p(q-1)} \\ leak \cdot231103^{p(q-1)} \equiv 231103^{p + p(q-1)} \mod{q} \\ leak \equiv231103^n \mod{q} \\ leak - 231103^n = kq \\ q = \gcd(kq,\n)\)</span></p><p>这里还有一个知识点，就是<span class="math inline">\(231103^n\)</span>数值太大了，直接 <span class="math inline">\(q = \gcd(leak - 231103^n,\ n)\)</span>是算不完的，优化方法就是 <span class="math inline">\(231103^n\Longrightarrow pow(231103,\ n,\ n)\)</span>，证明：<span class="math inline">\(q = \gcd(leak - 231103^n\ \%\ n,\ n)\)</span></p><p><span class="math inline">\(leak\ \%\ n - 231103^n\ \%\ n = kq\ \%\ n= kq + k_1 n = kq + k_1 pq = (k + k_1 p)q = k_2 q \\ \because q =\gcd(k_2 q,\ n) \\ \therefore q = \gcd(leak - 231103^n\ \%\ n,\n)\)</span></p><div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>kq <span class="op">=</span> leak <span class="op">-</span> <span class="bu">pow</span>(<span class="dv">231103</span>, n, n)</span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>q <span class="op">=</span> gcd(kq, n)</span></code></pre></div><h3 id="c_1-mp-n-c_2-mq-n"><span class="math inline">\(c_1 = m^p\ \%\n,\ c_2 = m^q\ \%\ n\)</span></h3><p>出自：2023 NKCTF baby_RSA</p><p><span class="math inline">\(\because \begin{cases} c_1 \equiv m^p\mod{n} \\ c_2 \equiv m^q \mod{n} \end{cases} \\ \therefore\begin{cases} c_1 \equiv m \mod{p} \\ c_2 \equiv m \mod{q} \end{cases}\\ c_1 c_2 \equiv (m + k_1 p)(m + k_2 q) \equiv m^2 + m(k_1 p + k_2 q) +0 \equiv m^2 + m(c_1 - m + c_2 - m) \mod{n}\)</span></p><div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>m <span class="op">=</span> PolynomialRing(Zmod(n), <span class="st">&#39;m&#39;</span>).gen()</span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>f <span class="op">=</span> c1<span class="op">*</span>c2 <span class="op">-</span> m<span class="op">**</span><span class="dv">2</span> <span class="op">-</span> m<span class="op">*</span>(c1<span class="op">-</span>m<span class="op">+</span>c2<span class="op">-</span>m)</span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> mbits <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">200</span>, <span class="dv">500</span>):  <span class="co"># 爆破 m 的位数</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    res <span class="op">=</span> f.small_roots(X<span class="op">=</span><span class="dv">2</span><span class="op">**</span>mbits, beta<span class="op">=</span><span class="dv">1</span>)</span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> res:</span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>        m <span class="op">=</span> <span class="bu">int</span>(res[<span class="dv">0</span>])</span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(long_to_bytes(m))</span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">break</span></span></code></pre></div><h3 id="p-1-inversep-q-q-1-inverseq-p"><span class="math inline">\(p^{-1} = inverse(p,\ q),\ q^{-1} = inverse(q,\p)\)</span></h3><p>对于p和q，用扩展欧几里得可以求出整数s和t使得 <span class="math inline">\(ps + qt = \gcd(p,\ q) =1\)</span>，其中一正一负</p><p>假设 <span class="math inline">\(s &gt; 0\)</span>，<span class="math inline">\(t &lt; 0\)</span>，则 <span class="math inline">\(\begin{cases} p^{-1} = s \\ q^{-1} = t\ \%\ p = t+ p \end{cases}\)</span></p><p><span class="math inline">\(ps + qt = 1 \\ pp^{-1} + q(q^{-1} - p) =1 \\ pp^{-1} + qq^{-1} - n = 1\)</span></p><div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>p, q <span class="op">=</span> var(<span class="st">&#39;p q&#39;</span>)</span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>seq <span class="op">=</span> [</span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    n <span class="op">==</span> p <span class="op">*</span> q,</span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    p <span class="op">*</span> inv_p <span class="op">+</span> q <span class="op">*</span> inv_q <span class="op">==</span> <span class="dv">1</span> <span class="op">+</span> n</span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>]</span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(solve(seq, p, q))</span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高数重要公式</title>
      <link href="/2023/11/16/%E9%AB%98%E6%95%B0%E9%87%8D%E8%A6%81%E5%85%AC%E5%BC%8F/"/>
      <url>/2023/11/16/%E9%AB%98%E6%95%B0%E9%87%8D%E8%A6%81%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="等价无穷小">等价无穷小</h2><p><strong>前提：<span class="math inline">\(x \rightarrow0\)</span></strong></p><p><span class="math inline">\(\ln(1+x) \thicksim x \qquad x - \ln(1+x)\thicksim \dfrac{1}{2} x^2\)</span></p><blockquote><p>拓展：当 <span class="math inline">\(x \rightarrow 1,\ \ln{x}\thicksim x-1\)</span></p></blockquote><p><span class="math inline">\(e^x - 1 \thicksim x \qquad a^x - 1\thicksim x \ln{a}\)</span></p><p><span class="math inline">\(当\ a \neq 0,\ \ (1 + x)^a - 1 \thicksimax \qquad (1 + x)^n - 1 \thicksim nx\)</span></p><blockquote><p>拓展：<span class="math inline">\(当\ A(x) \rightarrow 0\ 且\A(x)B(x) \rightarrow 0,\ [1 + A(x)]^{B(x)} - 1 \thicksimA(x)B(x)\)</span></p></blockquote><hr><p><span class="math inline">\(\sin{x} \thicksim \arcsin{x} \thicksim\tan{x} \thicksim \arctan{x} \thicksim x\)</span></p><p><span class="math inline">\([x - \sin{x}] \thicksim [\arcsin{x} - x]\thicksim \dfrac{1}{6} x^3\)</span></p><p><span class="math inline">\([\tan{x} - x] \thicksim [x - \arctan{x}]\thicksim \dfrac{1}{3} x^3\)</span></p><p><span class="math inline">\(1 - \cos{x} \thicksim \dfrac{1}{2}x^2\)</span></p><blockquote><p>拓展：<span class="math inline">\(1 - \cos^a{x} \thicksim\dfrac{a}{2} x^2\)</span></p></blockquote><h2 id="导数积分">导数+积分</h2><h3 id="基本公式">基本公式</h3><p><span class="math inline">\((C)^{&#39;} = 0\)</span></p><p><span class="math inline">\((x^a)^{&#39;} = ax^{a-1} \qquad \int x^a\\mathrm{d} x = \dfrac{1}{a + 1} x^{a + 1} + C\)</span></p><p><span class="math inline">\((e^x)^{&#39;} = e^x \qquad (a^x)^{&#39;}= a^x \ln{a}\)</span></p><p><span class="math inline">\((\ln{\left| x \right|})^{&#39;} =\dfrac{1}{x} \qquad (\log_{a}{x})^{&#39;} = \dfrac{1}{x\ln{a}}\)</span></p><hr><p><span class="math inline">\((\sin{x})^{&#39;} = \cos{x} \qquad(\cos{x})^{&#39;} = -\sin{x}\)</span></p><p><span class="math inline">\((\tan{x})^{&#39;} = \sec^2{x} \qquad(\cot{x})^{&#39;} = -\csc^2{x}\)</span></p><p><span class="math inline">\((\sec{x})^{&#39;} = \sec{x} \tan{x}\qquad (\csc{x})^{&#39;} = -\csc{x} \cot{x}\)</span></p><p><span class="math inline">\(\int \tan{x}\ \mathrm{d} x = -\ln{\left|\cos{x} \right|} + C \qquad \int \cot{x}\ \mathrm{d} x = \ln{\left|\sin{x} \right|} + C\)</span></p><p><span class="math inline">\(\int \sec{x}\ \mathrm{d} x = \ln{\left|\sec{x} + \tan{x} \right|} + C \qquad \int \csc{x}\ \mathrm{d} x =\ln{\left| \csc{x} - \cot{x} \right|} + C\)</span></p><blockquote><p><strong>结合三角恒等变换公式</strong></p><p>求 <span class="math inline">\(\int \sin^2{x}\ \mathrm{d}x\)</span>，用 <span class="math inline">\(\cos{2x} = 1 - 2\sin^2{x}\)</span></p><p>求 <span class="math inline">\(\int \cos^2{x}\ \mathrm{d}x\)</span>，用 <span class="math inline">\(\cos{2x} = 2 \cos^2{x} -1\)</span></p><p>求 <span class="math inline">\(\int \tan^2{x}\ \mathrm{d}x\)</span>，用 <span class="math inline">\(\tan^2{x} + 1 =\sec^2{a}\)</span></p><p>求 <span class="math inline">\(\int \cot^2{x}\ \mathrm{d}x\)</span>，用 <span class="math inline">\(\cot^2{x} + 1 =\csc^2{a}\)</span></p></blockquote><p><span class="math inline">\((\arcsin{x})^{&#39;} =-(\arccos{x})^{&#39;} = \dfrac{1}{\sqrt{1 - x^2}} \qquad \int\dfrac{1}{\sqrt{a^2 - x^2}}\ \mathrm{d} x = \arcsin{\dfrac{x}{a}} +C\)</span></p><p><span class="math inline">\((\arctan{x})^{&#39;} =-(\mathrm{arccot}\,{x})^{&#39;} = \dfrac{1}{1 + x^2} \qquad \int\dfrac{1}{a^2 + x^2}\  \mathrm{d} x = \dfrac{1}{a} \arctan{\dfrac{x}{a}}+ C\)</span></p><p><span class="math inline">\(\int \dfrac{1}{a^2 - x^2}\ \mathrm{d} x =\dfrac{1}{2a} \ln{\left| \dfrac{a + x}{a - x} \right|} + C\)</span></p><p><span class="math inline">\(\int \dfrac{1}{\sqrt{x^2 \pm a^2}}\\mathrm{d} x = \ln{\left| x + \sqrt{x^2 \pm a^2} \right|} +C\)</span></p><h3 id="常用快速公式">常用快速公式</h3><p><span class="math inline">\((\dfrac{1}{x})^{&#39;} =-\dfrac{1}{x^2}\)</span></p><p><span class="math inline">\((\sqrt{x})^{&#39;} = \dfrac{1}{2\sqrt{x}}\)</span></p><p><span class="math inline">\((\sin^2{x})^{&#39;} =-(\cos^2{x})^{&#39;} = \sin{2x}\)</span></p><h2 id="泰勒麦克劳林展开式">泰勒+麦克劳林展开式</h2><p>几何级数：<span class="math inline">\(\dfrac{1}{1-x} =\sum\limits_{n=0}^{\infty} x^n = 1 + x + x^2 + \cdots \qquad x \in(-1,1)\)</span></p><blockquote><p>换元得：<span class="math inline">\(\dfrac{1}{1+x} =\sum\limits_{n=0}^{\infty} (-1)^n x^n = 1 - x + x^2 - \cdots \qquad x\in (-1,1)\)</span></p></blockquote><p>二项式级数：<span class="math inline">\((1+x)^a = 1 + ax +\dfrac{a(a-1)}{2!} x^2 + \cdots +\dfrac{\overbrace{a(a-1)\cdots(a-n+1)}^{n项}}{n!} x^n + \cdots \qquad x\in (-1,1)\)</span></p><p><span class="math inline">\(e^x = \sum\limits_{n=0}^{\infty}{\dfrac{x^n}{n!}} = 1 + x + \dfrac{x^2}{2!} + \cdots \qquad x \in(-\infty,+\infty)\)</span></p><p><span class="math inline">\(\sin{x} = \sum\limits_{n=0}^{\infty}(-1)^n \dfrac{x^{2n+1}}{(2n+1)!} = x - \dfrac{x^3}{3!} + \dfrac{x^5}{5!}- \cdots \qquad x \in (-\infty,+\infty)\)</span></p><blockquote><p>求导得：<span class="math inline">\(\cos{x} =\sum\limits_{n=0}^{\infty} (-1)^n \dfrac{x^{2n}}{(2n)!} = 1 -\dfrac{x^2}{2!} + \dfrac{x^4}{4!} - \cdots \qquad x \in(-\infty,+\infty)\)</span></p></blockquote><p><span class="math inline">\(\ln{(1+x)} = \sum\limits_{n=1}^{\infty}(-1)^{n+1} \dfrac{x^{n}}{n} = x - \dfrac{x^2}{2} + \dfrac{x^3}{3} -\cdots \qquad x \in (-1,1]\)</span></p><blockquote><p>换元得：<span class="math inline">\(-\ln{(1-x)} =\sum\limits_{n=1}^{\infty} \dfrac{x^{n}}{n} = x + \dfrac{x^2}{2} +\dfrac{x^3}{3} + \cdots \qquad x \in [-1,1)\)</span></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 高数 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>矩阵快速幂</title>
      <link href="/2023/11/13/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
      <url>/2023/11/13/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<figure><img src="/2023/11/13/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/image-20231113153404815.png" alt="image-20231113153404815"><figcaption aria-hidden="true">image-20231113153404815</figcaption></figure><p>下面说的都是<strong>一次</strong>递归公式，其他的例如像QuadraticMap这种二次递归，不一定有通项公式，不能用矩阵快速幂实现快速运算，得老老实实用递归或者渐进表达式。</p><h2 id="斐波那契数列">斐波那契数列</h2><h3 id="定义">定义</h3><p><span class="math inline">\(a_n = a_{n-1} + a_{n-2}\)</span>，其中<span class="math inline">\(a_0 = 1\)</span>，<span class="math inline">\(a_1 = 1\)</span></p><h3 id="矩阵变换">矩阵变换</h3><p><span class="math inline">\(\begin{bmatrix} a_n \\ a_{n-1}\end{bmatrix} = \begin{bmatrix} 1 &amp; 1 \\ 1 &amp; 0 \end{bmatrix}\cdot \begin{bmatrix} a_{n-1} \\ a_{n-2} \end{bmatrix}\)</span></p><h3 id="代码">代码</h3><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sage.<span class="bu">all</span> <span class="im">import</span> <span class="op">*</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>state <span class="op">=</span> [<span class="dv">1</span>, <span class="dv">1</span>]</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>, <span class="dv">10</span><span class="op">**</span><span class="dv">2</span><span class="op">+</span><span class="dv">1</span>):</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    y <span class="op">=</span> state[i] <span class="op">+</span> state[i<span class="op">-</span><span class="dv">1</span>]</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    state.append(y)</span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>M1 <span class="op">=</span> matrix([</span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">1</span>],</span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">0</span>],</span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>])</span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>M2 <span class="op">=</span> matrix([</span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    [state[<span class="dv">1</span>]],</span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    [state[<span class="dv">0</span>]],</span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>])</span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>state_ <span class="op">=</span> (M1<span class="op">**</span>(<span class="dv">10</span><span class="op">**</span><span class="dv">2</span>) <span class="op">*</span> M2)[<span class="dv">0</span>][<span class="dv">0</span>]</span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(state_ <span class="op">==</span> state[<span class="op">-</span><span class="dv">1</span>])</span></code></pre></div><h2 id="一阶线性递推式">一阶线性递推式</h2><h3 id="定义-1">定义</h3><p><span class="math inline">\(f_n \equiv a \times f_{n-1} + b\mod{p}\)</span></p><h3 id="矩阵变换-1">矩阵变换</h3><p><span class="math inline">\(\begin{bmatrix} f_n \\ b \end{bmatrix} =\begin{bmatrix} a &amp; 1 \\ 0 &amp; 1 \end{bmatrix} \cdot\begin{bmatrix} f_{n-1} \\ b \end{bmatrix}\)</span></p><h3 id="代码-1">代码</h3><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sage.<span class="bu">all</span> <span class="im">import</span> <span class="op">*</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> getRandomInteger</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>state <span class="op">=</span> [getRandomInteger(<span class="dv">256</span>)]</span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> getRandomInteger(<span class="dv">256</span>)</span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>b <span class="op">=</span> getRandomInteger(<span class="dv">256</span>)</span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> getRandomInteger(<span class="dv">256</span>)</span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">10</span><span class="op">**</span><span class="dv">2</span>):  <span class="co"># 10**10000</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    y <span class="op">=</span> (a <span class="op">*</span> state[i] <span class="op">+</span> b) <span class="op">%</span> p</span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    state.append(y)</span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>M1 <span class="op">=</span> matrix(Zmod(p), [</span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>    [a, <span class="dv">1</span>],</span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">0</span>, <span class="dv">1</span>],</span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>])</span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>M2 <span class="op">=</span> matrix(Zmod(p), [</span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>    [state[<span class="dv">0</span>]],</span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>    [b],</span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>])</span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>state_ <span class="op">=</span> (M1<span class="op">**</span>(<span class="dv">10</span><span class="op">**</span><span class="dv">2</span>) <span class="op">*</span> M2)[<span class="dv">0</span>][<span class="dv">0</span>]</span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(state_ <span class="op">==</span> state[<span class="op">-</span><span class="dv">1</span>])</span></code></pre></div><h2 id="二阶线性递推式">二阶线性递推式</h2><h3 id="定义-2">定义</h3><p><span class="math inline">\(f_n \equiv a \times f_{n-1} + b \timesf_{n-2} + c \mod{p}\)</span></p><h3 id="矩阵变换-2">矩阵变换</h3><p><span class="math inline">\(\begin{bmatrix} f_n \\ f_{n-1} \\ c\end{bmatrix} = \begin{bmatrix} a &amp; b &amp; 1 \\ 1 &amp; 0 &amp; 0\\ 0 &amp; 0 &amp; 1 \end{bmatrix} \cdot \begin{bmatrix} f_{n-1} \\f_{n-2} \\ c \end{bmatrix}\)</span></p><h3 id="代码-2">代码</h3><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sage.<span class="bu">all</span> <span class="im">import</span> <span class="op">*</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> getRandomInteger</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>state <span class="op">=</span> [getRandomInteger(<span class="dv">256</span>), getRandomInteger(<span class="dv">256</span>)]</span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> getRandomInteger(<span class="dv">256</span>)</span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>b <span class="op">=</span> getRandomInteger(<span class="dv">256</span>)</span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>c <span class="op">=</span> getRandomInteger(<span class="dv">256</span>)</span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> getRandomInteger(<span class="dv">256</span>)</span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>, <span class="dv">10</span><span class="op">**</span><span class="dv">2</span><span class="op">+</span><span class="dv">1</span>):  <span class="co"># 10**10000</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    y <span class="op">=</span> (a <span class="op">*</span> state[i] <span class="op">+</span> b <span class="op">*</span> state[i<span class="op">-</span><span class="dv">1</span>] <span class="op">+</span> c) <span class="op">%</span> p</span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    state.append(y)</span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>M1 <span class="op">=</span> matrix(Zmod(p), [</span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    [a, b, <span class="dv">1</span>],</span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">0</span>],</span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>],</span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>])</span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>M2 <span class="op">=</span> matrix(Zmod(p), [</span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    [state[<span class="dv">1</span>]],</span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>    [state[<span class="dv">0</span>]],</span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    [c],</span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>])</span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>state_ <span class="op">=</span> (M1<span class="op">**</span>(<span class="dv">10</span><span class="op">**</span><span class="dv">2</span>) <span class="op">*</span> M2)[<span class="dv">0</span>][<span class="dv">0</span>]</span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(state_ <span class="op">==</span> state[<span class="op">-</span><span class="dv">1</span>])</span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>特殊条形码</title>
      <link href="/2023/10/19/%E7%89%B9%E6%AE%8A%E6%9D%A1%E5%BD%A2%E7%A0%81/"/>
      <url>/2023/10/19/%E7%89%B9%E6%AE%8A%E6%9D%A1%E5%BD%A2%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="定位符">定位符</h2><figure><img src="/2023/10/19/%E7%89%B9%E6%AE%8A%E6%9D%A1%E5%BD%A2%E7%A0%81/%E5%AE%9A%E4%BD%8D%E7%AC%A6.png" alt="定位符"><figcaption aria-hidden="true">定位符</figcaption></figure><h2 id="barcode">BarCode</h2><p>工具：<a href="https://products.aspose.app/barcode/zh-hans/recognize#">Aspose.BarCode</a></p><figure><img src="/2023/10/19/%E7%89%B9%E6%AE%8A%E6%9D%A1%E5%BD%A2%E7%A0%81/BarCode.png" alt="BarCode"><figcaption aria-hidden="true">BarCode</figcaption></figure><pre><code>Part 1:flag&#123;1_DPart 2:0_y0UPart 3:_kN0w_Part 4:b4rCod3?&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二维码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三角函数</title>
      <link href="/2023/10/19/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"/>
      <url>/2023/10/19/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="函数图像">函数图像</h2><h3 id="sin">sin</h3><figure><img src="/2023/10/19/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/sin%E5%92%8Carcsin.png" alt="sin和arcsin"><figcaption aria-hidden="true">sin和arcsin</figcaption></figure><figure><img src="/2023/10/19/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/sin%E5%92%8Ccsc.png" alt="sin和csc"><figcaption aria-hidden="true">sin和csc</figcaption></figure><h3 id="cos">cos</h3><figure><img src="/2023/10/19/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/cos%E5%92%8Carccos.png" alt="cos和arccos"><figcaption aria-hidden="true">cos和arccos</figcaption></figure><figure><img src="/2023/10/19/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/cos%E5%92%8Csec.png" alt="cos和sec"><figcaption aria-hidden="true">cos和sec</figcaption></figure><h3 id="tan">tan</h3><figure><img src="/2023/10/19/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/tan%E5%92%8Ccot.png" alt="tan和cot"><figcaption aria-hidden="true">tan和cot</figcaption></figure><figure><img src="/2023/10/19/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/arctan%E5%92%8Carccot.png" alt="arctan和arccot"><figcaption aria-hidden="true">arctan和arccot</figcaption></figure><h2 id="基本公式">基本公式</h2><h3 id="倒数关系">倒数关系</h3><p><span class="math inline">\(\sin{a} \csc{a} = 1\)</span></p><p><span class="math inline">\(\cos{a} \sec{a} = 1\)</span></p><p><span class="math inline">\(\tan{a} \cot{a} = 1\)</span></p><h3 id="商数关系">商数关系</h3><p><span class="math inline">\(\tan{a} =\dfrac{\sin{a}}{\cos{a}}\)</span></p><h3 id="平方关系">平方关系</h3><p><span class="math inline">\(\sin^{2}{a} + \cos^{2}{a} =1\)</span></p><p><span class="math inline">\(\tan^{2}{a} + 1 =\sec^{2}{a}\)</span></p><p><span class="math inline">\(\cot^{2}{a} + 1 =\csc^{2}{a}\)</span></p><h2 id="诱导公式">诱导公式</h2><h3 id="公式15">公式1~5</h3><figure><img src="/2023/10/19/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/%E8%B1%A1%E9%99%90%E7%AC%A6%E5%8F%B7.png" alt="象限符号"><figcaption aria-hidden="true">象限符号</figcaption></figure><h3 id="公式6">公式6</h3><p><span class="math inline">\(\sin(\dfrac{\pi}{2} + a) =\cos{a}\)</span>，<span class="math inline">\(\sin(\dfrac{\pi}{2} - a) =\cos{a}\)</span></p><p><span class="math inline">\(\cos(\dfrac{\pi}{2} + a) = -\sin{a}\)</span>，<span class="math inline">\(\cos(\dfrac{\pi}{2} - a) =\sin{a}\)</span></p><p><span class="math inline">\(\tan(\dfrac{\pi}{2} + a) = -\cot{a}\)</span>，<span class="math inline">\(\tan(\dfrac{\pi}{2} - a) =\cot{a}\)</span></p><p><span class="math inline">\(\cot(\dfrac{\pi}{2} + a) = -\tan{a}\)</span>，<span class="math inline">\(\cot(\dfrac{\pi}{2} - a) =\tan{a}\)</span></p><h2 id="推导公式">推导公式</h2><h3 id="积化和差">积化和差</h3><p><span class="math inline">\(\sin{a} \cos{b} = \dfrac{\sin(a+b) +\sin(a-b)}{2}\)</span></p><p><span class="math inline">\(\cos{a} \cos{b} = \dfrac{\sin(a+b) -\sin(a-b)}{2}\)</span></p><p><span class="math inline">\(\cos{a} \cos{b} = \dfrac{\cos(a+b) +\cos(a-b)}{2}\)</span></p><p><span class="math inline">\(\sin{a} \sin{b} = \dfrac{\cos(a+b) -\cos(a-b)}{2}\)</span></p><h3 id="和差化积">和差化积</h3><p><span class="math inline">\(\sin{a} + \sin{b} = 2\sin{\dfrac{a+B}{2}} \cos{\dfrac{a-B}{2}}\)</span></p><p><span class="math inline">\(\sin{a} - \sin{b} = 2\cos{\dfrac{a+B}{2}} \cos{\dfrac{a-B}{2}}\)</span></p><p><span class="math inline">\(\cos{a} + \cos{b} = 2\cos{\dfrac{a+B}{2}} \cos{\dfrac{a-B}{2}}\)</span></p><p><span class="math inline">\(\cos{a} - \cos{b} = -2\sin{\dfrac{a+B}{2}} \sin{\dfrac{a-B}{2}}\)</span></p><h3 id="二角和差">二角和差</h3><p><span class="math inline">\(\sin(a \pm b) = \sin{a} \cos{b} \pm\cos{a} \sin{b}\)</span></p><p><span class="math inline">\(\cos(a \pm b) = \cos{a} \cos{b} \mp\sin{a} \sin{b}\)</span></p><p><span class="math inline">\(\tan(a \pm b) = \dfrac{\tan{a} \pm\tan{b}}{1 \mp \tan{a} \tan{b}}\)</span></p><p><span class="math inline">\(\cot(a \pm b) = \dfrac{\cot{b} \cot{a}\mp 1 }{\cot{b} \pm \cot{a}}\)</span></p><h3 id="二倍角">二倍角</h3><p><span class="math inline">\(\sin{2a} = 2 \sin{a} \cos{a}\)</span></p><p><span class="math inline">\(\cos{2a} = \cos^2{a} - \sin^2{a} = 2\cos^2{a} - 1 = 1 - 2 \sin^2{a}\)</span></p><p><span class="math inline">\(\tan{2a} = \dfrac{2 \tan{a}}{1 -\tan^2{a}}\)</span></p><h3 id="半倍角">半倍角</h3><p>由二倍角推导</p><h3 id="三倍角">三倍角</h3><p><span class="math inline">\(\sin{3a} = 3 \sin{a} - 4\sin^3{a}\)</span></p><p><span class="math inline">\(\cos{3a} = 4 \cos^3{a} - 3\cos{a}\)</span></p><h3 id="万能公式">万能公式</h3><p>令 <span class="math inline">\(t = \tan{\dfrac{a}{2}}\)</span></p><p><span class="math inline">\(\sin{a} = \dfrac{2t}{1 +t^2}\)</span></p><p><span class="math inline">\(\cos{a} = \dfrac{1 - t^2}{1 +t^2}\)</span></p>]]></content>
      
      
      <categories>
          
          <category> 考研 </category>
          
          <category> 高数 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BugKu 1和0的故事</title>
      <link href="/2023/10/14/BugKu-1%E5%92%8C0%E7%9A%84%E6%95%85%E4%BA%8B/"/>
      <url>/2023/10/14/BugKu-1%E5%92%8C0%E7%9A%84%E6%95%85%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>附件1.txt如下</p><pre><codecode></pre><p>附件内容是一个25*25的01矩阵。用1表示黑色方块，0表示白色方块，猜测这是一个缺少定位符的二维码。</p><h2 id="方法一excel">方法一（Excel）</h2><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> xlwt</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="co"># 创建一个xls</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>book <span class="op">=</span> xlwt.Workbook()</span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co"># 创建一个样式 (黑色填充，无边界)</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>Style <span class="op">=</span> xlwt.easyxf(<span class="st">&#39;pattern: pattern solid, fore_colour black; font: height 250&#39;</span>)</span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 添加一个表单，允许覆盖</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>table <span class="op">=</span> book.add_sheet(<span class="st">&#39;flag_code&#39;</span>, cell_overwrite_ok<span class="op">=</span><span class="va">True</span>)</span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> <span class="bu">open</span>(<span class="st">&#39;1.txt&#39;</span>, <span class="st">&#39;r&#39;</span>) <span class="im">as</span> f:</span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    s <span class="op">=</span> <span class="st">&quot;&quot;</span>.join(f.read().splitlines())</span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>MAX <span class="op">=</span> <span class="dv">25</span>  <span class="co">#二维码边长，若大于256需要用xlsxwriter模块</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>i <span class="op">=</span> <span class="dv">0</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> y <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">0</span>, MAX):</span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">0</span>, MAX):</span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>        table.col(x).width <span class="op">=</span> <span class="dv">256</span><span class="op">*</span><span class="dv">3</span>  <span class="co">#256为衡量单位，3表示3个字符宽度</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span>(s[i] <span class="op">==</span> <span class="st">&#39;1&#39;</span>):  <span class="co">#如果是1则在Excel上涂黑</span></span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>            table.write(y, x, <span class="st">&#39;&#39;</span>, style<span class="op">=</span>Style)</span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>        i <span class="op">+=</span> <span class="dv">1</span></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>book.save(<span class="st">&#39;1和0的故事.xls&#39;</span>)</span></code></pre></div><p>加入二维码定位符</p><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 7*7的二维码定位符</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>locator <span class="op">=</span> [</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>],</span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>],</span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">1</span>],</span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">1</span>],</span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">1</span>],</span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>],</span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>]</span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>]</span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> draw_locator(y, x):</span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">7</span>):</span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> j <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">7</span>):</span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>            pos1 <span class="op">=</span> locator[i][j]</span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> pos1 <span class="op">==</span> <span class="dv">1</span>:  <span class="co">#如果是1则在Excel上涂黑</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>                table.write(y<span class="op">+</span>i, x<span class="op">+</span>j, <span class="st">&#39;&#39;</span>, style<span class="op">=</span>Style)</span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>draw_locator(<span class="dv">0</span>, <span class="dv">0</span>)  <span class="co">#左上角</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>draw_locator(<span class="dv">0</span>, <span class="dv">18</span>)  <span class="co">#右上角</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>draw_locator(<span class="dv">18</span>, <span class="dv">0</span>)  <span class="co">#左下角</span></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>book.save(<span class="st">&#39;1和0的故事.xls&#39;</span>)</span></code></pre></div><figure><img src="/2023/10/14/BugKu-1%E5%92%8C0%E7%9A%84%E6%95%85%E4%BA%8B/image-20231014110419730.png" alt="image-20231014110419730"><figcaption aria-hidden="true">image-20231014110419730</figcaption></figure><figure><img src="/2023/10/14/BugKu-1%E5%92%8C0%E7%9A%84%E6%95%85%E4%BA%8B/image-20231014110617274.png" alt="image-20231014110617274"><figcaption aria-hidden="true">image-20231014110617274</figcaption></figure><h2 id="方法二pil">方法二（PIL）</h2><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> PIL <span class="im">import</span> Image</span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> <span class="bu">open</span>(<span class="st">&#39;1.txt&#39;</span>, <span class="st">&#39;r&#39;</span>) <span class="im">as</span> f:</span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    s <span class="op">=</span> <span class="st">&quot;&quot;</span>.join(f.read().splitlines())</span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>MAX <span class="op">=</span> <span class="dv">25</span>  <span class="co">#二维码边长</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>pic <span class="op">=</span> Image.new(<span class="st">&quot;1&quot;</span>, (MAX, MAX))</span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>i <span class="op">=</span> <span class="dv">0</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> y <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">0</span>, MAX):</span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">0</span>, MAX):</span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span>(s[i] <span class="op">==</span> <span class="st">&#39;1&#39;</span>):</span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>            pic.putpixel([x, y], <span class="dv">0</span>)</span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>            pic.putpixel([x, y], <span class="dv">1</span>)</span><span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>        i <span class="op">+=</span> <span class="dv">1</span></span><span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>pic.show()</span><span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>pic.save(<span class="st">&quot;1和0的故事.png&quot;</span>)</span></code></pre></div><p>加入二维码定位符</p><div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 7*7的二维码定位符</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>locator <span class="op">=</span> [</span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>],</span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>],</span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">1</span>],</span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">1</span>],</span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">1</span>],</span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>],</span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    [<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>]</span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>]</span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> draw_locator(y, x):</span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">7</span>):</span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> j <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">7</span>):</span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>            pos1 <span class="op">=</span> locator[i][j]</span><span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span>(pos1 <span class="op">==</span> <span class="dv">1</span>):</span><span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>                pic.putpixel([x<span class="op">+</span>i, y<span class="op">+</span>j], <span class="dv">0</span>)</span><span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span>:</span><span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>                pic.putpixel([x<span class="op">+</span>i, y<span class="op">+</span>j], <span class="dv">1</span>)</span><span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>draw_locator(<span class="dv">0</span>, <span class="dv">0</span>)  <span class="co">#左上角</span></span><span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>draw_locator(<span class="dv">0</span>, <span class="dv">18</span>)  <span class="co">#右上角</span></span><span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>draw_locator(<span class="dv">18</span>, <span class="dv">0</span>)  <span class="co">#左下角</span></span><span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>pic.show()</span><span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>pic.save(<span class="st">&quot;1和0的故事.png&quot;</span>)</span></code></pre></div><figure><img src="/2023/10/14/BugKu-1%E5%92%8C0%E7%9A%84%E6%95%85%E4%BA%8B/image-20231014110859750.png" alt="image-20231014110859750"><figcaption aria-hidden="true">image-20231014110859750</figcaption></figure><figure><img src="/2023/10/14/BugKu-1%E5%92%8C0%E7%9A%84%E6%95%85%E4%BA%8B/image-20231014110943899.png" alt="image-20231014110943899"><figcaption aria-hidden="true">image-20231014110943899</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PIL </tag>
            
            <tag> 二维码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LCG</title>
      <link href="/2023/10/14/LCG/"/>
      <url>/2023/10/14/LCG/</url>
      
        <content type="html"><![CDATA[<p>线性同余法（LCG）是一种产生伪随机数的方法。</p><p><span class="math inline">\(x_{n+1} = (ax_n + b)\ \%\ p\)</span></p><p>主要的求解公式：</p><table><colgroup><col style="width: 7%"><col style="width: 92%"></colgroup><thead><tr class="header"><th style="text-align: center;">求解</th><th style="text-align: center;">公式</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><span class="math inline">\(x_n\)</span></td><td style="text-align: center;"><span class="math inline">\(x_n = a^{-1}(x_{n+1} - b)\ \%\ p\)</span></td></tr><tr class="even"><td style="text-align: center;">a</td><td style="text-align: center;"><span class="math inline">\(a = (x_{n+2}- x_{n+1}) \cdot (x_{n+1} - x_n)^{-1}\ \%\ p\)</span></td></tr><tr class="odd"><td style="text-align: center;">b</td><td style="text-align: center;"><span class="math inline">\(b = (x_{n+1}- ax_n)\ \%\ p\)</span></td></tr><tr class="even"><td style="text-align: center;">p</td><td style="text-align: center;"><span class="math inline">\(t_n =x_{n+1} - x_n\)</span>，<span class="math inline">\(p = \gcd (t_{n+1}t_{n-1} - t_n^2,\ t_n t_{n-2} - t_{n-1}^2)\)</span></td></tr></tbody></table><p>根据lcg算法主要有4种ctf题型：</p><h2 id="lcg-1">LCG-1</h2><p>已知a，b，p，最后的seed</p><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>flag <span class="op">=</span> <span class="st">b&#39;flag&#123;******&#125;&#39;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>seed <span class="op">=</span> bytes_to_long(flag)</span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>length <span class="op">=</span> seed.bit_length()</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> <span class="dv">155971836487521127413178805566278019291810483723477332740305259</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>b <span class="op">=</span> <span class="dv">202084599085918621034388670259032014348708452871335919618754423</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> <span class="dv">199296574393235855574369935471815490856316662404539770651985589</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">10</span>):</span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    seed <span class="op">=</span> (a <span class="op">*</span> seed <span class="op">+</span> b) <span class="op">%</span> p</span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;seed =&quot;</span>, seed)</span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="co"># seed = 68551282599199125993658805253274162071651594471901897411266172</span></span></code></pre></div><p>解题脚本</p><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> <span class="dv">155971836487521127413178805566278019291810483723477332740305259</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>b <span class="op">=</span> <span class="dv">202084599085918621034388670259032014348708452871335919618754423</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> <span class="dv">199296574393235855574369935471815490856316662404539770651985589</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>MMI <span class="op">=</span> <span class="kw">lambda</span> A, n, s<span class="op">=</span><span class="dv">1</span>, t<span class="op">=</span><span class="dv">0</span>, N<span class="op">=</span><span class="dv">0</span> : (n<span class="op">&lt;</span><span class="dv">2</span> <span class="kw">and</span> t<span class="op">%</span>N <span class="kw">or</span> MMI(n, A<span class="op">%</span>n, t, s<span class="op">-</span>A<span class="op">//</span>n<span class="op">*</span>t, N <span class="kw">or</span> n), <span class="op">-</span><span class="dv">1</span>)[n<span class="op">&lt;</span><span class="dv">1</span>]  <span class="co">#逆元计算</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>ani <span class="op">=</span> MMI(a, p)</span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>seed <span class="op">=</span> <span class="dv">68551282599199125993658805253274162071651594471901897411266172</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">10</span>):</span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    seed <span class="op">=</span> (ani <span class="op">*</span> (seed <span class="op">-</span> b)) <span class="op">%</span> p</span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(long_to_bytes(seed))</span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="co"># b&#39;flag&#123;This_is_a_test_flag!&#125;&#39;</span></span></code></pre></div><h2 id="lcg-2">LCG-2</h2><p>已知a，p，output[]的至少连续2个元素</p><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>flag <span class="op">=</span> <span class="st">b&#39;flag&#123;******&#125;&#39;</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>seed <span class="op">=</span> bytes_to_long(flag)</span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>length <span class="op">=</span> seed.bit_length()</span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> <span class="dv">164031293329341681517343090279314923560076759098650542522957107</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>b <span class="op">=</span> getPrime(length)</span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> <span class="dv">205493536419436317448904933834796929859527270820306334380668191</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>output <span class="op">=</span> []</span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">10</span>):</span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    seed <span class="op">=</span> (a <span class="op">*</span> seed <span class="op">+</span> b) <span class="op">%</span> p</span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    output.append(seed)</span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;output6 =&quot;</span>, output[<span class="dv">6</span>])</span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;output7 =&quot;</span>, output[<span class="dv">7</span>])</span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="co"># output6 = 45745972511051576017008610408791747592523694924890977868463767</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="co"># output7 = 47022551472047051529936224993657475046232093691394911203042968</span></span></code></pre></div><p>解题脚本</p><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> <span class="dv">164031293329341681517343090279314923560076759098650542522957107</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="co"># b = getPrime(length)</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> <span class="dv">205493536419436317448904933834796929859527270820306334380668191</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>output6 <span class="op">=</span> <span class="dv">45745972511051576017008610408791747592523694924890977868463767</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>output7 <span class="op">=</span> <span class="dv">47022551472047051529936224993657475046232093691394911203042968</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>gift <span class="op">=</span> [output6, output7]</span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="co">#求b</span></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>b <span class="op">=</span> (gift[<span class="dv">1</span>] <span class="op">-</span> a <span class="op">*</span> gift[<span class="dv">0</span>]) <span class="op">%</span> p</span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>MMI <span class="op">=</span> <span class="kw">lambda</span> A, n, s<span class="op">=</span><span class="dv">1</span>, t<span class="op">=</span><span class="dv">0</span>, N<span class="op">=</span><span class="dv">0</span> : (n<span class="op">&lt;</span><span class="dv">2</span> <span class="kw">and</span> t<span class="op">%</span>N <span class="kw">or</span> MMI(n, A<span class="op">%</span>n, t, s<span class="op">-</span>A<span class="op">//</span>n<span class="op">*</span>t, N <span class="kw">or</span> n), <span class="op">-</span><span class="dv">1</span>)[n<span class="op">&lt;</span><span class="dv">1</span>]  <span class="co">#逆元计算</span></span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>ani <span class="op">=</span> MMI(a, p)</span><span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>seed <span class="op">=</span> gift[<span class="dv">0</span>]</span><span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">7</span>):</span><span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>    seed <span class="op">=</span> (ani <span class="op">*</span> (seed <span class="op">-</span> b)) <span class="op">%</span> p</span><span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(long_to_bytes(seed))</span><span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a><span class="co"># b&#39;flag&#123;This_is_a_test_flag!&#125;&#39;</span></span></code></pre></div><h2 id="lcg-3"><strong>LCG-3</strong></h2><p>已知p，output[]的至少连续3个元素</p><div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>flag <span class="op">=</span> <span class="st">b&#39;flag&#123;******&#125;&#39;</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>seed <span class="op">=</span> bytes_to_long(flag)</span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>length <span class="op">=</span> seed.bit_length()</span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> getPrime(length)</span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>b <span class="op">=</span> getPrime(length)</span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> <span class="dv">198631956575512484302101120778529528702856823120687410371716261</span></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>output <span class="op">=</span> []</span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">10</span>):</span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    seed <span class="op">=</span> (a <span class="op">*</span> seed <span class="op">+</span> b) <span class="op">%</span> p</span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    output.append(seed)</span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;output6 =&quot;</span>, output[<span class="dv">6</span>])</span><span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;output7 =&quot;</span>, output[<span class="dv">7</span>])</span><span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;output8 =&quot;</span>, output[<span class="dv">8</span>])</span><span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a><span class="co"># output6 = 158657126406132303164720900786306081992669207557561976396601882</span></span><span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a><span class="co"># output7 = 173086776808844203987690862148966917477329732513213152207487530</span></span><span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a><span class="co"># output8 = 177076590008214173673645268154603521522421695802860665456135973</span></span></code></pre></div><p>解题脚本</p><div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="co"># a = getPrime(length)</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="co"># b = getPrime(length)</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> <span class="dv">198631956575512484302101120778529528702856823120687410371716261</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>output6 <span class="op">=</span> <span class="dv">158657126406132303164720900786306081992669207557561976396601882</span></span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>output7 <span class="op">=</span> <span class="dv">173086776808844203987690862148966917477329732513213152207487530</span></span><span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>output8 <span class="op">=</span> <span class="dv">177076590008214173673645268154603521522421695802860665456135973</span></span><span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>gift <span class="op">=</span> [output6, output7, output8]</span><span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="co">#求a</span></span><span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>MMI <span class="op">=</span> <span class="kw">lambda</span> A, n, s<span class="op">=</span><span class="dv">1</span>, t<span class="op">=</span><span class="dv">0</span>, N<span class="op">=</span><span class="dv">0</span> : (n<span class="op">&lt;</span><span class="dv">2</span> <span class="kw">and</span> t<span class="op">%</span>N <span class="kw">or</span> MMI(n, A<span class="op">%</span>n, t, s<span class="op">-</span>A<span class="op">//</span>n<span class="op">*</span>t, N <span class="kw">or</span> n), <span class="op">-</span><span class="dv">1</span>)[n<span class="op">&lt;</span><span class="dv">1</span>]  <span class="co">#逆元计算</span></span><span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> (gift[<span class="dv">2</span>] <span class="op">-</span> gift[<span class="dv">1</span>]) <span class="op">*</span> MMI((gift[<span class="dv">1</span>] <span class="op">-</span> gift[<span class="dv">0</span>]), p) <span class="op">%</span> p</span><span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="co">#求b</span></span><span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>b <span class="op">=</span> (gift[<span class="dv">1</span>] <span class="op">-</span> a <span class="op">*</span> gift[<span class="dv">0</span>]) <span class="op">%</span> p</span><span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>ani <span class="op">=</span> MMI(a, p)</span><span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>seed <span class="op">=</span> gift[<span class="dv">0</span>]</span><span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">7</span>):</span><span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a>    seed <span class="op">=</span> (ani <span class="op">*</span> (seed <span class="op">-</span> b)) <span class="op">%</span> p</span><span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(long_to_bytes(seed))</span><span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a><span class="co"># b&#39;flag&#123;This_is_a_test_flag!&#125;&#39;</span></span></code></pre></div><h2 id="lcg-4">LCG-4</h2><p>已知output[]的至少连续5个元素（尽量多）</p><div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>flag <span class="op">=</span> <span class="st">b&#39;flag&#123;******&#125;&#39;</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>seed <span class="op">=</span> bytes_to_long(flag)</span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>length <span class="op">=</span> seed.bit_length()</span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> getPrime(length)</span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>b <span class="op">=</span> getPrime(length)</span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> getPrime(length)</span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>output <span class="op">=</span> []</span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">10</span>):</span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>    seed <span class="op">=</span> (a <span class="op">*</span> seed <span class="op">+</span> b) <span class="op">%</span> p</span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>    output.append(seed)</span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">&quot;output =&quot;</span>, output)</span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a><span class="co"># output = [168629567557403367186885420444281063317304797350594299096453254, 37810059304430144255796769528019631599115017008645572272676848, 153467674569619182399277890239200868986878351528697622090498978, 130441867851875429652192551507870248584806009516471536255184738, 165072061865233441980188465107233439530695291179218871834569574, 169462757174386331962049136282171771458712297105156982582248590, 5733544729623964834423742564305810327645521588143518180790467, 29307267147593660845277077949962969239999900796071055310564887, 167961532214306463210330398007557832141937447147319867665370457, 18070228848659542858848007252120157475238819346210716562665302]</span></span></code></pre></div><p>解题脚本</p><div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> gmpy2</span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a> </span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="co"># a = getPrime(length)</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="co"># b = getPrime(length)</span></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="co"># p = getPrime(length)</span></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>output <span class="op">=</span> [<span class="dv">168629567557403367186885420444281063317304797350594299096453254</span>, <span class="dv">37810059304430144255796769528019631599115017008645572272676848</span>, <span class="dv">153467674569619182399277890239200868986878351528697622090498978</span>, <span class="dv">130441867851875429652192551507870248584806009516471536255184738</span>, <span class="dv">165072061865233441980188465107233439530695291179218871834569574</span>, <span class="dv">169462757174386331962049136282171771458712297105156982582248590</span>, <span class="dv">5733544729623964834423742564305810327645521588143518180790467</span>, <span class="dv">29307267147593660845277077949962969239999900796071055310564887</span>, <span class="dv">167961532214306463210330398007557832141937447147319867665370457</span>, <span class="dv">18070228848659542858848007252120157475238819346210716562665302</span>]</span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>gift <span class="op">=</span> output</span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>t <span class="op">=</span> []</span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="bu">len</span>(gift) <span class="op">-</span> <span class="dv">1</span>):</span><span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>    t.append(gift[i] <span class="op">-</span> gift[i<span class="op">-</span><span class="dv">1</span>])</span><span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>all_p <span class="op">=</span> []</span><span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="bu">len</span>(t) <span class="op">-</span> <span class="dv">2</span>):</span><span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>    all_p.append(gmpy2.gcd((t[i<span class="op">+</span><span class="dv">1</span>] <span class="op">*</span> t[i<span class="op">-</span><span class="dv">1</span>] <span class="op">-</span> t[i] <span class="op">*</span> t[i]), (t[i<span class="op">+</span><span class="dv">2</span>] <span class="op">*</span> t[i] <span class="op">-</span> t[i<span class="op">+</span><span class="dv">1</span>] <span class="op">*</span> t[i<span class="op">+</span><span class="dv">1</span>])))</span><span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> p <span class="kw">in</span> all_p:</span><span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>    p <span class="op">=</span> <span class="bu">abs</span>(p)</span><span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> p <span class="op">==</span> <span class="dv">1</span>:</span><span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>        <span class="cf">continue</span></span><span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>    <span class="co">#求a</span></span><span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>    MMI <span class="op">=</span> <span class="kw">lambda</span> A, n, s<span class="op">=</span><span class="dv">1</span>, t<span class="op">=</span><span class="dv">0</span>, N<span class="op">=</span><span class="dv">0</span> : (n<span class="op">&lt;</span><span class="dv">2</span> <span class="kw">and</span> t<span class="op">%</span>N <span class="kw">or</span> MMI(n, A<span class="op">%</span>n, t, s<span class="op">-</span>A<span class="op">//</span>n<span class="op">*</span>t, N <span class="kw">or</span> n), <span class="op">-</span><span class="dv">1</span>)[n<span class="op">&lt;</span><span class="dv">1</span>]  <span class="co">#逆元计算</span></span><span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>    a <span class="op">=</span> (gift[<span class="dv">2</span>] <span class="op">-</span> gift[<span class="dv">1</span>]) <span class="op">*</span> MMI((gift[<span class="dv">1</span>] <span class="op">-</span> gift[<span class="dv">0</span>]), p) <span class="op">%</span> p</span><span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>    <span class="co">#求b</span></span><span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a>    b <span class="op">=</span> (gift[<span class="dv">1</span>] <span class="op">-</span> a <span class="op">*</span> gift[<span class="dv">0</span>]) <span class="op">%</span> p</span><span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a>    ani <span class="op">=</span> MMI(a, p)</span><span id="cb8-33"><a href="#cb8-33" aria-hidden="true" tabindex="-1"></a>    seed <span class="op">=</span> gift[<span class="dv">0</span>]</span><span id="cb8-34"><a href="#cb8-34" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb8-35"><a href="#cb8-35" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>):</span><span id="cb8-36"><a href="#cb8-36" aria-hidden="true" tabindex="-1"></a>        seed <span class="op">=</span> (ani <span class="op">*</span> (seed <span class="op">-</span> b)) <span class="op">%</span> p</span><span id="cb8-37"><a href="#cb8-37" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb8-38"><a href="#cb8-38" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(long_to_bytes(seed))</span><span id="cb8-39"><a href="#cb8-39" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-40"><a href="#cb8-40" aria-hidden="true" tabindex="-1"></a><span class="co"># b&#39;\x02&#39;</span></span><span id="cb8-41"><a href="#cb8-41" aria-hidden="true" tabindex="-1"></a><span class="co"># b&#39;\x02&#39;</span></span><span id="cb8-42"><a href="#cb8-42" aria-hidden="true" tabindex="-1"></a><span class="co"># b&#39;\x17b\xd3\x03\xcaV\x95\x9a\xc5\xe7C\xa6\x1f\xa3\x88\xd5L\x02\xf5\xa9I\xb2\xce\x17/\xc7\xa6&#39;</span></span><span id="cb8-43"><a href="#cb8-43" aria-hidden="true" tabindex="-1"></a><span class="co"># b&#39;\x1e\xb9I\xd93\xbd\x07\xcf\xbc\xbd\xe0\xf1\xf4\x18gB\xe8P\xfe;\x01B\xd2\xccy&gt;&#39;</span></span><span id="cb8-44"><a href="#cb8-44" aria-hidden="true" tabindex="-1"></a><span class="co"># b&#39;\rj5\xb4\x19\xd9\xef\xa4\xee\xb0x\x08y\xc6\x0f\x81\x91@\xaf\x16\xd5\xaf\xdb\x8c)\xca\x9e&#39;</span></span><span id="cb8-45"><a href="#cb8-45" aria-hidden="true" tabindex="-1"></a><span class="co"># b&#39;flag&#123;This_is_a_test_flag!&#125;&#39;</span></span><span id="cb8-46"><a href="#cb8-46" aria-hidden="true" tabindex="-1"></a><span class="co"># b&#39;flag&#123;This_is_a_test_flag!&#125;&#39;</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python数据类型、编码类型的转化</title>
      <link href="/2023/10/12/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E5%8C%96/"/>
      <url>/2023/10/12/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="str和bytes">str和bytes</h2><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> str_ <span class="op">=</span> <span class="st">&quot;PK</span><span class="ch">\x03\x04</span><span class="st">&quot;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> str_.encode()</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="st">b&#39;PK</span><span class="ch">\x03\x04</span><span class="st">&#39;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> bytes_ <span class="op">=</span> <span class="st">b&#39;PK</span><span class="ch">\x03\x04</span><span class="st">&#39;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> bytes_.decode()</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;PK</span><span class="ch">\x03\x04</span><span class="co">&#39;</span></span></code></pre></div><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> str_ <span class="op">=</span> <span class="st">&quot;504B0304&quot;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">bytes</span>.fromhex(str_)</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="st">b&#39;PK</span><span class="ch">\x03\x04</span><span class="st">&#39;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> bytes_ <span class="op">=</span> <span class="st">b&#39;PK</span><span class="ch">\x03\x04</span><span class="st">&#39;</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> bytes_.<span class="bu">hex</span>()</span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;504b0304&quot;</span></span></code></pre></div><p>举例：以hex形式，读取文件和写入文件</p><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> <span class="bu">open</span>(<span class="st">&#39;1.txt&#39;</span>, <span class="st">&#39;rb&#39;</span>) <span class="im">as</span> f:</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    str_ <span class="op">=</span> f.read().<span class="bu">hex</span>()</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co"># str_ = &quot;504B0304&quot;</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>str_1 <span class="op">=</span> <span class="st">&quot;&quot;</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">0</span>, <span class="bu">len</span>(str_), <span class="dv">2</span>):</span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    str_1 <span class="op">+=</span> str_[i:i<span class="op">+</span><span class="dv">2</span>]</span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> <span class="bu">open</span>(<span class="st">&#39;2.txt&#39;</span>, <span class="st">&#39;wb&#39;</span>) <span class="im">as</span> f:</span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    f.write(<span class="bu">bytes</span>.fromhex(str_1))</span></code></pre></div><h2 id="int和bytes">int和bytes</h2><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> bytes_ <span class="op">=</span> <span class="st">b&quot;flag&#123;&#125;&quot;</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">int</span>.from_bytes(bytes_, <span class="st">&#39;big&#39;</span>)</span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dv">112615676672893</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> int_ <span class="op">=</span> <span class="dv">112615676672893</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> int_.to_bytes(<span class="dv">10</span>, <span class="st">&#39;big&#39;</span>)</span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="st">b&#39;</span><span class="ch">\x00\x00\x00\x00</span><span class="st">flag&#123;&#125;&#39;</span></span></code></pre></div><div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a> </span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> bytes_ <span class="op">=</span> <span class="st">b&quot;flag&#123;&#125;&quot;</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> bytes_to_long(bytes_)</span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="dv">112615676672893</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> int_ <span class="op">=</span> <span class="dv">112615676672893</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> long_to_bytes(int_)</span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="st">b&#39;flag&#123;&#125;&#39;</span></span></code></pre></div><div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> bytes_ <span class="op">=</span> <span class="st">b&quot;flag&#123;&#125;&quot;</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">list</span>(bytes_)</span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>[<span class="dv">102</span>, <span class="dv">108</span>, <span class="dv">97</span>, <span class="dv">103</span>, <span class="dv">123</span>, <span class="dv">125</span>]</span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> list_ <span class="op">=</span> [<span class="dv">102</span>, <span class="dv">108</span>, <span class="dv">97</span>, <span class="dv">103</span>, <span class="dv">123</span>, <span class="dv">125</span>]</span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">bytes</span>(list_)</span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="st">b&#39;flag&#123;&#125;&#39;</span></span></code></pre></div><h2 id="进制和ascii">进制和ascii</h2><div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bn">0b1100001</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="dv">97</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bn">0o12</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="dv">97</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bn">0xa</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="dv">97</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">int</span>(<span class="st">&quot;0b1100001&quot;</span>, <span class="dv">2</span>)</span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="dv">97</span></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">int</span>(<span class="st">&quot;0o141&quot;</span>, <span class="dv">8</span>)</span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="dv">97</span></span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">int</span>(<span class="st">&quot;0x61&quot;</span>, <span class="dv">16</span>)</span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="dv">97</span></span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">int</span>(<span class="st">&quot;1100001&quot;</span>, <span class="dv">2</span>)</span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="dv">97</span></span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">int</span>(<span class="st">&quot;141&quot;</span>, <span class="dv">8</span>)</span><span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a><span class="dv">97</span></span><span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">int</span>(<span class="st">&quot;61&quot;</span>, <span class="dv">16</span>)</span><span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a><span class="dv">97</span></span></code></pre></div><div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">bin</span>(<span class="dv">97</span>)</span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;0b1100001&#39;</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">oct</span>(<span class="dv">97</span>)</span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;0o141&#39;</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">hex</span>(<span class="dv">97</span>)</span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;0x61&#39;</span></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">bin</span>(<span class="dv">97</span>)[<span class="dv">2</span>:]</span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;1100001&#39;</span></span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">oct</span>(<span class="dv">97</span>)[<span class="dv">2</span>:]</span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;141&#39;</span></span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">hex</span>(<span class="dv">97</span>)[<span class="dv">2</span>:]</span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;61&#39;</span></span></code></pre></div><div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">ord</span>(<span class="st">&quot;a&quot;</span>)</span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="dv">97</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="bu">chr</span>(<span class="dv">97</span>)</span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;a&#39;</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常见密码和编码</title>
      <link href="/2023/10/10/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81/"/>
      <url>/2023/10/10/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="aesdesrc4rabbittripledes">AES、DES、RC4、Rabbit、TripleDes</h2><p>https://www.matools.com/encrypt</p><pre><code>U2FsdGVk 开头</code></pre><h2 id="morse-code">Morse Code</h2><figure><img src="/2023/10/10/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81/Morse%20Code.png" alt="Morse Code"><figcaption aria-hidden="true">Morse Code</figcaption></figure><h2 id="quoted-printable">Quoted-printable</h2><pre><code>=E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6</code></pre><h2 id="盲文">盲文</h2><p>https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen</p><pre><code>⡇⡓⡄⡖⠂⠀⠂⠀⡋⡉⠔⠀⠔⡅⡯⡖⠔⠁⠔⡞⠔⡔⠔⡯⡽⠔⡕⠔⡕⠔⡕⠔⡕⠔⡕⡍=</code></pre><h2 id="音符">音符</h2><p>https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue</p><pre><code>‖♬♩‖¶♯‖♬♭‖♬♫‖♫♪‖♩♬‖♬♬♭♭♫‖♩♫‖♬♪♭♭♭‖¶∮‖‖‖‖♩♬‖♬♪‖♩♫♭♭♭♭♭§‖♩♩♭♭♫♭♭♭‖♬♭‖¶§♭♭♯‖♫∮‖♬¶‖¶∮‖♬♫‖♫♬‖♫♫§=</code></pre><h2 id="logo-draw">Logo Draw</h2><p>http://www.calormen.com/logo/</p><pre><code>cs pu lt 90 fd 500 rt 90 pd fd 100 rt 90 repeat 18[fd 5 rt 10]</code></pre><h2 id="标准中文电码">标准中文电码</h2><p>https://apps.chasedream.com/chinese-commercial-code/</p><pre><code>人工智能 -&gt; 0086 1562 2535 5174</code></pre><h2 id="培根密码">培根密码</h2><pre><code>ABAAAABABBABAAAABABAAABAAABAAABAABAAAABAAAABA</code></pre><h2 id="五笔输入法">五笔输入法</h2><p>http://www.daziba.cn/tools/onlinewbime.aspx</p><pre><code>bnhn s wwy vffg vffg rrhy fhnv -&gt; 也要从娃娃抓起</code></pre><h2 id="与佛论禅">与佛论禅</h2><p>佛曰</p><p>https://www.keyfc.net/bbs/tools/tudoucode.aspx</p><pre><code>佛曰：麼那究夷穆波缽特那冥婆怯耶即姪皤室那亦有</code></pre><p>新佛曰</p><p>http://hi.pcmoe.net/buddha.html</p><pre><code>新佛曰：諸隸冥僧冥降冥吽冥諸陀冥摩隸僧冥缽薩冥願耨冥咤陀冥願羅冥嘇喃塞冥薩如冥囑冥</code></pre><p>佛又曰</p><p>http://www.atoolbox.net/Tool.php?Id=1027</p><pre><code>key：flag佛又曰：输萨南南耶遮哆伽诃醯婆度哆地咩啰伽啰利室耶羯参室蒙卢蒙伽南娑无羯夜漫</code></pre><h2 id="敲击码">敲击码</h2><pre><code>flag     -&gt; 21 31 11 2221311122 -&gt; f(F) l(L) a(A) g(G)</code></pre><h2 id="仿射密码">仿射密码</h2><p>y = (ax + b) mod 26</p><pre><code>加密函数：y = (5x + 12) mod 26VGPPEMLLAZGPPC</code></pre><h2 id="serpent蛇">Serpent（蛇）</h2><p>http://serpent.online-domain-tools.com/</p><pre><code>key：flagtKIpcxx/0R1DJHdRutfqFg==</code></pre><h2 id="openssl">Openssl</h2><p>算法大全</p><pre><code>openssl enc -list</code></pre><p>eg.</p><pre><code>openssl enc -aes-128-ecb -pass pass:&quot;flag&quot; -nosalt -a -e -in flag.png -out flag.txtopenssl enc -aes-128-ecb -pass pass:&quot;flag&quot; -nosalt -a -d -in flag.txt -out flag.png</code></pre><h2 id="维吉尼亚爆破">维吉尼亚爆破</h2><p>https://www.mygeocachingprofile.com/codebreaker.vigenerecipher.aspx</p><p>https://guballa.de/vigenere-solver</p><h2 id="ook">Ook</h2><p>https://www.splitbrain.org/services/ook</p><pre><code>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook?Ook. </code></pre><h2 id="aaencode">AAencode</h2><pre><code>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ [&#39;_&#39;]; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)=&#123;ﾟΘﾟ: &#39;_&#39; ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +&#39;_&#39;) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ &#39;_&#39;)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +&#39;_&#39;)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +&#39;_&#39;) [c^_^o];(ﾟДﾟ) [&#39;c&#39;] = ((ﾟДﾟ)+&#39;_&#39;) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [&#39;o&#39;] = ((ﾟДﾟ)+&#39;_&#39;) [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) [&#39;c&#39;]+(ﾟДﾟ) [&#39;o&#39;]+(ﾟωﾟﾉ +&#39;_&#39;)[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +&#39;_&#39;) [ﾟｰﾟ] + ((ﾟДﾟ) +&#39;_&#39;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +&#39;_&#39;) [ﾟΘﾟ]+((ﾟｰﾟ==3) +&#39;_&#39;) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [&#39;c&#39;]+((ﾟДﾟ)+&#39;_&#39;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [&#39;o&#39;]+((ﾟｰﾟ==3) +&#39;_&#39;) [ﾟΘﾟ];(ﾟДﾟ) [&#39;_&#39;] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +&#39;_&#39;) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+&#39;_&#39;) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +&#39;_&#39;) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +&#39;_&#39;) [ﾟΘﾟ]+ (ﾟωﾟﾉ +&#39;_&#39;) [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]=&#39;\\&#39;; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +&#39;_&#39;)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]=&#39;\&quot;&#39;;(ﾟДﾟ) [&#39;_&#39;] ( (ﾟДﾟ) [&#39;_&#39;] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (&#39;_&#39;);</code></pre><h2 id="jjencode">JJencode</h2><pre><code>$=~[];$=&#123;___:++$,$$$$:(![]+&quot;&quot;)[$],__$:++$,$_$_:(![]+&quot;&quot;)[$],_$_:++$,$_$$:(&#123;&#125;+&quot;&quot;)[$],$$_$:($[$]+&quot;&quot;)[$],_$$:++$,$$$_:(!&quot;&quot;+&quot;&quot;)[$],$__:++$,$_$:++$,$$__:(&#123;&#125;+&quot;&quot;)[$],$$_:++$,$$$:++$,$___:++$,$__$:++$&#125;;$.$_=($.$_=$+&quot;&quot;)[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+&quot;&quot;)[$.__$])+((!$)+&quot;&quot;)[$._$$]+($.__=$.$_[$.$$_])+($.$=(!&quot;&quot;+&quot;&quot;)[$.__$])+($._=(!&quot;&quot;+&quot;&quot;)[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!&quot;&quot;+&quot;&quot;)[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+&quot;\&quot;&quot;+$.$$$$+(![]+&quot;&quot;)[$._$_]+$.$_$_+&quot;\\&quot;+$.__$+$.$__+$.$$$+&quot;&#123;&#125;&quot;+&quot;\&quot;&quot;)())();</code></pre><h2 id="uuencode">UUencode</h2><pre><code>begin 664 quizM9FQA9WMT97-T7W1E&lt;W1?=&amp;5S=%]T97-T7W1E&lt;W1?=&amp;5S=%]T97-T7W1E&lt;W1?M=&amp;5S=%]T97-T7W1E&lt;W1?=&amp;5S=%]T97-T7W1E&lt;W1?=&amp;5S=%]T97-T7W1E&lt;W1?!?0```end</code></pre><p>linux :</p><pre><code>uudecode -o 2.txt 1.txt</code></pre><h2 id="核心价值观编码">核心价值观编码</h2><pre><code>公正公正公正友善公正公正民主公正法治法治诚信民主法治自由公正平等法治和谐法治自由法治诚信和谐</code></pre><h2 id="jsfuck">JSfuck</h2><pre><code>(![]+[])[+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[+!+[]]+(![]+[+[]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[!+[]+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[(![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]]((+((+(+!+[]+[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]]+[+[]])+[])[+!+[]]+[+[]+[+[]]+[+[]]+[+[]]+[+[]]+[+[]]+[+[]]+[+[]]+[+[]]+[+!+[]]])+[])[!+[]+!+[]]+[+!+[]])</code></pre><h2 id="brainfuck">Brainfuck</h2><pre><code>+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++.+ +++++ .&lt;+++ [-&gt;-- -&lt;]&gt;- -.+++ +++.&lt;++++[ -&gt;+++ +&lt;]&gt;+ +++.+ +.&lt;</code></pre><h2 id="spam">Spam</h2><p>https://www.spammimic.com/decode.cgi</p><pre><code>Dear Professional ; Especially for you - this cutting-edge intelligence ! If you no longer wish to receive our publications simply reply with a Subject: of &quot;REMOVE&quot; and you will immediately be removed from our club . This mail is being sent in compliance with Senate bill 2216 ; Title 9 ; Section 303 ! This is not multi-level marketing ! Why work for somebody else when you can become rich inside 13 WEEKS ! Have you ever noticed people love convenience and people love convenience . Well, now is your chance to capitalize on this . WE will help YOU process your orders within seconds and use credit cards on your website ! You are guaranteed to succeed because we take all the risk ! But don&#39;t believe us . Mrs Anderson of Indiana tried us and says &quot;I was skeptical but it worked for me&quot; . We assure you that we operate within all applicable laws . You will blame yourself forever if you don&#39;t order now . Sign up a friend and you&#39;ll get a discount of 10% ! Thank-you for your serious consideration of our offer ! </code></pre><h2 id="零宽度">零宽度</h2><p>https://330k.github.io/misc_tools/unicode_steganography.html</p><pre><code>This‌‌‌‌‍‬‍‬‌‌‌‌‍‬﻿‌‌‌‌‌‍‬‌‍‌‌‌‌‍‬‍﻿‌‌‌‌‍﻿‬﻿ is‌‌‌‌‍﻿﻿‍ a fake flag!</code></pre><p>https://offdev.net/demos/zwsp-steg-js</p><pre><code>T​​​​‏​‍​​​​‏‌‎​​​​‎‏‍​​​​‏​‎​​​​‏‏‎​​​‌​​​his is a fake flag!</code></pre><h2 id="dna-code">DNA Code</h2><figure><img src="/2023/10/10/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81/DNA%20Code.png" alt="DNA Code"><figcaption aria-hidden="true">DNA Code</figcaption></figure><h2 id="dancing-man-code">Dancing Man Code</h2><figure><img src="/2023/10/10/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81/Dancing%20Man%20Code.jpg" alt="Dancing Man Code"><figcaption aria-hidden="true">Dancing Man Code</figcaption></figure><h2 id="双音多频">双音多频</h2><p>电话拨号音</p><figure><img src="/2023/10/10/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%92%8C%E7%BC%96%E7%A0%81/%E5%8F%8C%E9%9F%B3%E5%A4%9A%E9%A2%91.webp" alt="双音多频"><figcaption aria-hidden="true">双音多频</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023 WMCTF signin</title>
      <link href="/2023/10/10/2023-WMCTF-signin/"/>
      <url>/2023/10/10/2023-WMCTF-signin/</url>
      
        <content type="html"><![CDATA[<h2 id="题目源码">题目源码</h2><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> random <span class="im">import</span> randrange</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> secret <span class="im">import</span> flag</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> pr(msg):</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(msg)</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>pr(<span class="vs">br&quot;&quot;&quot;</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="vs">                        ....&#39;&#39;&#39;&#39;&#39;&#39;....                        </span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="vs">                     .`&quot;,:;;II;II;;;;:,&quot;^&#39;.                    </span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="vs">                  &#39;&quot;IlllI;;;;;;;;;;;;;Il!!l;^.                 </span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="vs">                `l&gt;&lt;&gt;!!!!!!!!iiiii!!!!!!!!i&gt;&lt;!&quot;.               </span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="vs">             &#39;:&gt;?]__++~~~~~&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;~~+__i&quot;.            </span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="vs">           .:i+&#125;&#123;]?-__+++~~~~~~&lt;&lt;&lt;&lt;&lt;~~~~~~+_-?[\1_!^           </span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="vs">          .;&lt;_&#125;\&#123;]-_++~&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;~+-?]\|]+&lt;^          </span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="vs">          .!-&#123;t|[?-&#125;(|(()&#123;_&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;_&#125;1)))1&#125;??]&#123;t|]_&quot;          </span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="vs">           !)nf&#125;]-?/\)&#123;]]]_&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;_]]&#125;&#125;&#123;\/?-][)vf?`          </span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="vs">          &#39;!tX/&#125;]--&lt;]&#123;\Un[~~&lt;&lt;&lt;&lt;&lt;~~&lt;~-11Yz)&lt;--?[&#123;vv[&quot;.         </span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="vs">         .&lt;&#123;xJt&#125;]?!ibm0%&amp;Ci&gt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;!0kJW%w+:-?[&#123;uu)&#125;,         </span></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="vs">          !1fLf&#125;]_::xmqQj[&quot;I~&lt;&lt;&lt;&lt;&lt;&lt;&gt;&quot;(ZqOu&#123;I^&lt;?[&#123;cc)[`         </span></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="vs">          `&#125;|x\&#125;]_+&lt;!&lt;+~&lt;&lt;__~&lt;&lt;&lt;&lt;&lt;&lt;+_&lt;&lt;_+&lt;&gt;&lt;++-[1j/(&gt;          </span></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="vs">           !\j/&#123;]-++___--_+~~&lt;i;I&gt;~~~__-______?&#125;(jf&#125;`          </span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="vs">            ;~(|&#125;?_++++~~++~+]-++]?+++~~~~+++-[1/]&gt;^           </span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a><span class="vs">              ;\([?__+_-?]?-_-----__-]?-_+++-]&#123;/].             </span></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="vs">               l||&#125;?__/rjffcCQQQQQLUxffjf&#125;+-]1\?&#39;              </span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a><span class="vs">                ,[\)[?&#125;&#125;-__[/nzXXvj)?__]&#123;??&#125;((&gt;.               </span></span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a><span class="vs">                 .I[|(1&#123;]_+~~~&lt;~~&lt;&lt;&lt;~+_[&#125;1(1+^                 </span></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a><span class="vs">                    ,~&#123;|\)&#125;]_++++++-?&#125;1)1?!`                   </span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a><span class="vs">                      .&quot;!_]&#123;11))1&#123;&#125;]-+i:&#39;                      </span></span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a><span class="vs">                          .`^&quot;,&quot;^`&#39;.                           </span></span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a><span class="vs">&quot;&quot;&quot;</span>.decode())</span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> gen_prime(bit):</span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="dv">1</span>:</span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>        P <span class="op">=</span> getPrime(bit)</span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="bu">len</span>(<span class="bu">bin</span>(P)) <span class="op">-</span> <span class="dv">2</span> <span class="op">==</span> bit:</span><span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> P</span><span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>pq_bit <span class="op">=</span> <span class="dv">512</span></span><span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>offset <span class="op">=</span> <span class="dv">16</span></span><span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>P,Q <span class="op">=</span> [gen_prime(pq_bit) <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">2</span>)]</span><span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>N <span class="op">=</span> P <span class="op">*</span> Q</span><span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>gift <span class="op">=</span> <span class="bu">int</span>(<span class="bu">bin</span>(P <span class="op">^</span> (Q <span class="op">&gt;&gt;</span> offset))[<span class="dv">2</span><span class="op">+</span>offset:],<span class="dv">2</span>)</span><span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>pr(N)</span><span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>pr(gift)</span><span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>inpP <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>())</span><span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> inpP <span class="op">!=</span> P:</span><span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>    pr(<span class="st">b&quot;you lose!&quot;</span>)</span><span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>    exit()</span><span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>secret <span class="op">=</span> randrange(<span class="dv">0</span>,P)</span><span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>bs <span class="op">=</span> [randrange(<span class="dv">0</span>,P) <span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">38</span>)]</span><span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a>results <span class="op">=</span> [(bi <span class="op">*</span> secret) <span class="op">%</span> P <span class="cf">for</span> bi <span class="kw">in</span> bs]</span><span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>rs <span class="op">=</span> [ri <span class="op">&amp;</span> (<span class="dv">2</span> <span class="op">**</span> offset <span class="op">-</span> <span class="dv">1</span>)  <span class="cf">for</span> ri <span class="kw">in</span> results]</span><span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>pr(bs)</span><span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>pr(rs)</span><span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>inpsecret <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>())</span><span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> inpsecret <span class="op">==</span> secret:</span><span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>    pr(flag)</span></code></pre></div><h2 id="分析">分析</h2><h3 id="rsa">RSA</h3><p>给出了<code>p^(q&gt;&gt;16)</code>的低<code>512-16</code>位，还原P。已知<code>p^(q&gt;&gt;16)</code>以前见过，直接套脚本；另外，这一题删掉了高16位，所以要加个爆破。</p><h3 id="hnp">HNP</h3><p><a href="https://blog.soreatu.com/posts/intended-solution-to-nhp-in-gxzyctf-2020/">IntendedSolution to NHP in GxzyCTF 2020</a></p><p>HNP问题，给出bs和results的低16位rs。</p><p>下面为了易于区分变量，以A、B、b、x命名，其中b是B的低位，已知A和b。</p><p><span class="math inline">\(B_i \equiv A_i x \mod{p} \\ 2^{16} k_i +b_i \equiv A_i x \mod{p} \\ 2^{16} k_i \equiv A_i x - b_i \mod{p} \\ k_i\equiv 2^{-16} A_i x - 2^{-16} b_i \mod{p} \\ 令 \begin{cases} AA_i =2^{-16} A_i \\ BB_i = -2^{-16} b_i \end{cases} \\ k_i \equiv AA_i \timesx + BB_i \mod{p}\)</span></p><figure><img src="/2023/10/10/2023-WMCTF-signin/image-20231010115405351.png" alt="image-20231010115405351"><figcaption aria-hidden="true">image-20231010115405351</figcaption></figure><p>最终计算用的是LLL结果的第二行，原因如下</p><figure><img src="/2023/10/10/2023-WMCTF-signin/image-20231010115633578.png" alt="image-20231010115633578"><figcaption aria-hidden="true">image-20231010115633578</figcaption></figure><p>题目给出t=38组，并且每组给出的位数是低16bit，本地测试了一下，这样的数据量能计算出来的成功率不是很高，所以需要多试几次。</p><h2 id="本地复现">本地复现</h2><h3 id="rsa-1">RSA</h3><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> pq_xor(x, tp, tq):</span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">len</span>(x) <span class="op">==</span> <span class="dv">0</span>:</span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> ((tp<span class="op">+</span>(<span class="dv">1</span><span class="op">&lt;&lt;</span><span class="bu">len</span>(x))) <span class="op">*</span> (tq<span class="op">+</span>(<span class="dv">1</span><span class="op">&lt;&lt;</span><span class="bu">len</span>(x)<span class="op">+</span><span class="dv">16</span>)) <span class="op">&lt;</span> N) <span class="kw">or</span> (tp <span class="op">*</span> tq <span class="op">&gt;</span> N):</span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> N <span class="op">%</span> (tp<span class="op">+</span><span class="dv">1</span>) <span class="op">==</span> <span class="dv">0</span>:</span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        pq.append(tp<span class="op">+</span><span class="dv">1</span>)</span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> x[<span class="dv">0</span>] <span class="op">==</span> <span class="st">&#39;0&#39;</span>:</span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        pq_xor(x[<span class="dv">1</span>:], tp, tq)  <span class="co"># p[]=0, q[]=0</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>        pq_xor(x[<span class="dv">1</span>:], tp<span class="op">+</span>(<span class="dv">1</span><span class="op">&lt;&lt;</span><span class="bu">len</span>(x)<span class="op">-</span><span class="dv">1</span>), tq<span class="op">+</span>(<span class="dv">1</span><span class="op">&lt;&lt;</span><span class="bu">len</span>(x)<span class="op">-</span><span class="dv">1</span><span class="op">+</span><span class="dv">16</span>))  <span class="co"># p[]=1, q[]=1</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>        pq_xor(x[<span class="dv">1</span>:], tp<span class="op">+</span>(<span class="dv">1</span><span class="op">&lt;&lt;</span><span class="bu">len</span>(x)<span class="op">-</span><span class="dv">1</span>), tq)  <span class="co"># p[]=1, q[]=0</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        pq_xor(x[<span class="dv">1</span>:], tp, tq<span class="op">+</span>(<span class="dv">1</span><span class="op">&lt;&lt;</span><span class="bu">len</span>(x)<span class="op">-</span><span class="dv">1</span><span class="op">+</span><span class="dv">16</span>))  <span class="co"># p[]=0, q[]=1</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>P <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>Q <span class="op">=</span> getPrime(<span class="dv">512</span>)</span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>N <span class="op">=</span> P <span class="op">*</span> Q</span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>gift <span class="op">=</span> <span class="bu">int</span>(<span class="bu">bin</span>(P <span class="op">^</span> (Q <span class="op">&gt;&gt;</span> <span class="dv">16</span>))[<span class="dv">2</span>:][<span class="dv">16</span>:], <span class="dv">2</span>)</span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;N = </span><span class="sc">&#123;</span>N<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&quot;gift = </span><span class="sc">&#123;</span>gift<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span><span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">2</span><span class="op">**</span><span class="dv">15</span>, <span class="dv">2</span><span class="op">**</span><span class="dv">16</span>):  <span class="co">#爆破gift的高16bit</span></span><span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>    gift_ <span class="op">=</span> <span class="bu">int</span>(<span class="bu">bin</span>(i)[<span class="dv">2</span>:].zfill(<span class="dv">16</span>) <span class="op">+</span> <span class="bu">bin</span>(gift)[<span class="dv">2</span>:].zfill(<span class="dv">512</span><span class="op">-</span><span class="dv">16</span>), <span class="dv">2</span>)</span><span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>    pq <span class="op">=</span> []</span><span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>    x <span class="op">=</span> <span class="bu">bin</span>(gift_)[<span class="dv">2</span>:].zfill(<span class="dv">512</span>)</span><span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> x[<span class="dv">16</span>] <span class="op">==</span> <span class="st">&#39;0&#39;</span>:</span><span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>        tp <span class="op">=</span> (gift_ <span class="op">&gt;&gt;</span> <span class="dv">512</span><span class="op">-</span><span class="dv">16</span> <span class="op">&lt;&lt;</span> <span class="dv">512</span><span class="op">-</span><span class="dv">16</span>) <span class="op">+</span> (<span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">512</span><span class="op">-</span><span class="dv">16</span><span class="op">-</span><span class="dv">1</span>)  <span class="co"># p[16]=1</span></span><span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a>        tp <span class="op">=</span> (gift_ <span class="op">&gt;&gt;</span> <span class="dv">512</span><span class="op">-</span><span class="dv">16</span> <span class="op">&lt;&lt;</span> <span class="dv">512</span><span class="op">-</span><span class="dv">16</span>)  <span class="co"># p[16]=0</span></span><span id="cb2-38"><a href="#cb2-38" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-39"><a href="#cb2-39" aria-hidden="true" tabindex="-1"></a>    tq <span class="op">=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">512</span><span class="op">-</span><span class="dv">1</span>  <span class="co"># q[0]=1</span></span><span id="cb2-40"><a href="#cb2-40" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-41"><a href="#cb2-41" aria-hidden="true" tabindex="-1"></a>    pq_xor(x[<span class="dv">1</span><span class="op">+</span><span class="dv">16</span>:], tp, tq)</span><span id="cb2-42"><a href="#cb2-42" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> pq <span class="op">!=</span> []:</span><span id="cb2-43"><a href="#cb2-43" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> pq[<span class="dv">0</span>] <span class="op">==</span> P <span class="kw">or</span> pq[<span class="dv">0</span>] <span class="op">==</span> Q:</span><span id="cb2-44"><a href="#cb2-44" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(pq)</span><span id="cb2-45"><a href="#cb2-45" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span></span></code></pre></div><h3 id="hnp-1">HNP</h3><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sage.<span class="bu">all</span> <span class="im">import</span> <span class="op">*</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Util.number <span class="im">import</span> <span class="op">*</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>Pbits <span class="op">=</span> <span class="dv">512</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>kbits <span class="op">=</span> <span class="dv">16</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>t <span class="op">=</span> <span class="dv">38</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>P <span class="op">=</span> getPrime(Pbits)</span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> randrange(<span class="dv">0</span>, P)</span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>A <span class="op">=</span> [randrange(<span class="dv">0</span>, P) <span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(t)]</span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>B <span class="op">=</span> [(bi <span class="op">*</span> x) <span class="op">%</span> P <span class="cf">for</span> bi <span class="kw">in</span> A]</span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>b <span class="op">=</span> [ri <span class="op">&amp;</span> (<span class="dv">2</span> <span class="op">**</span> kbits <span class="op">-</span> <span class="dv">1</span>) <span class="cf">for</span> ri <span class="kw">in</span> B]</span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&#39;P = </span><span class="sc">&#123;</span>P<span class="sc">&#125;</span><span class="ss">&#39;</span>)</span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&#39;A = </span><span class="sc">&#123;</span>A<span class="sc">&#125;</span><span class="ss">&#39;</span>)</span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f&#39;b = </span><span class="sc">&#123;</span>b<span class="sc">&#125;</span><span class="ss">&#39;</span>)</span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>AA <span class="op">=</span> [inverse_mod(<span class="dv">2</span><span class="op">**</span>kbits,P) <span class="op">*</span> Ai <span class="cf">for</span> Ai <span class="kw">in</span> A]</span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>BB <span class="op">=</span> [inverse_mod(<span class="dv">2</span><span class="op">**</span>kbits,P) <span class="op">*</span> (<span class="op">-</span>bi) <span class="cf">for</span> bi <span class="kw">in</span> b]</span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>M <span class="op">=</span> Matrix(QQ, t<span class="op">+</span><span class="dv">2</span>, t<span class="op">+</span><span class="dv">2</span>)</span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(t):</span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>    M[i, i] <span class="op">=</span> P</span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>    M[t, i] <span class="op">=</span> AA[i]</span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>    M[t<span class="op">+</span><span class="dv">1</span>, i] <span class="op">=</span> BB[i]</span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>M[t, t] <span class="op">=</span> <span class="dv">2</span><span class="op">**</span>(Pbits<span class="op">-</span>kbits)<span class="op">/</span>P</span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>M[t<span class="op">+</span><span class="dv">1</span>, t<span class="op">+</span><span class="dv">1</span>] <span class="op">=</span> <span class="dv">2</span><span class="op">**</span>(Pbits<span class="op">-</span>kbits)</span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>res <span class="op">=</span> M.LLL()</span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>B_high <span class="op">=</span> [<span class="bu">abs</span>(<span class="bu">int</span>(i)) <span class="cf">for</span> i <span class="kw">in</span> res[<span class="dv">1</span>]]</span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>B_ <span class="op">=</span> [(B_high[i]<span class="op">&lt;&lt;</span>kbits) <span class="op">+</span> <span class="bu">int</span>(b[i]) <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(t)]</span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(B <span class="op">==</span> B_)</span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>x_ <span class="op">=</span> (B_[<span class="dv">0</span>] <span class="op">*</span> inverse_mod(A[<span class="dv">0</span>],P)) <span class="op">%</span> P</span><span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(x <span class="op">==</span> x_)</span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
            <tag> HNP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 NepnepCTF RSA_random</title>
      <link href="/2023/10/10/2023-NepnepCTF-RSA-random/"/>
      <url>/2023/10/10/2023-NepnepCTF-RSA-random/</url>
      
        <content type="html"><![CDATA[<h2 id="题目源码">题目源码</h2><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> gmpy2 <span class="im">import</span> next_prime, invert <span class="im">as</span> inverse_mod</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Cipher <span class="im">import</span> PKCS1_v1_5</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.PublicKey <span class="im">import</span> RSA</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> random <span class="im">import</span> getrandbits</span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> math <span class="im">import</span> lcm</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sys <span class="im">import</span> exit</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>global_bits <span class="op">=</span> <span class="dv">1024</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>BANNER <span class="op">=</span> <span class="vs">rb&quot;&quot;&quot;</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="vs">.--------.--------.--------.--------.--------.--------.--------.--------.--------.--------.--------.</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="vs">| N.--.  | E.--.  | P.--.  | C.--.  | T.--.  | F.--.  | H.--.  | A.--.  | P.--.  | P.--.  | Y.--.  |</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="vs">|  :/\:  |  (\/)  |  :():  |  :/\:  |  :/\:  |  :/\:  |  (\/)  |  :():  |  :/\:  |  :/\:  |  (\/)  |</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="vs">|  :\/:  |  :\/:  |  ()()  |  (__)  |  :\/:  |  (__)  |  :\/:  |  ()()  |  :\/:  |  :\/:  |  :\/:  |</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="vs">|  &#39;--&#39;n |  &#39;--&#39;e |  &#39;--&#39;p |  &#39;--&#39;c | &#39;--&#39;t  |  &#39;--&#39;f |  &#39;--&#39;h |  &#39;--&#39;a |  &#39;--&#39;p |  &#39;--&#39;p |  &#39;--&#39;y |</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="vs">`--------`--------`--------`--------&#39;--------`--------`--------`--------`--------`--------`--------`</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="vs">&quot;&quot;&quot;</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> generate_prime(bits: <span class="bu">int</span>):</span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    p <span class="op">=</span> (getrandbits(bits <span class="op">-</span> <span class="dv">32</span>) <span class="op">&lt;&lt;</span> <span class="dv">32</span>)</span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> next_prime(p)</span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> generate_private_key(bits: <span class="bu">int</span>):</span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    p, q <span class="op">=</span> generate_prime(bits), generate_prime(bits)</span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>    n, phi <span class="op">=</span> p <span class="op">*</span> q, lcm(p<span class="op">-</span><span class="dv">1</span>, q<span class="op">-</span><span class="dv">1</span>)</span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>    d <span class="op">=</span> inverse_mod(<span class="bn">0x10001</span>, phi)</span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>    privateKey <span class="op">=</span> RSA.construct((<span class="bu">int</span>(n), <span class="bu">int</span>(<span class="bn">0x10001</span>), <span class="bu">int</span>(d), <span class="bu">int</span>(p), <span class="bu">int</span>(q)))</span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> privateKey, p <span class="op">&gt;</span> q</span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&quot;__main__&quot;</span>:</span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(BANNER.decode())</span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;Welcome to the world of random RSA.&quot;</span>)</span><span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">&quot;Please make your choice.&quot;</span>)</span><span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">8</span>):</span><span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>        choice <span class="op">=</span> <span class="bu">input</span>()</span><span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> choice <span class="op">==</span> <span class="st">&#39;1&#39;</span>:</span><span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>            p, q <span class="op">=</span> generate_prime(global_bits), generate_prime(global_bits)</span><span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>            N <span class="op">=</span> p<span class="op">*</span>q</span><span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>            d <span class="op">=</span> generate_prime(global_bits<span class="op">-</span><span class="dv">32</span>)</span><span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>            e <span class="op">=</span> inverse_mod(d, (p <span class="op">*</span> p <span class="op">-</span> <span class="dv">1</span>) <span class="op">*</span> (q <span class="op">*</span> q <span class="op">-</span> <span class="dv">1</span>))</span><span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="ss">f&quot;</span><span class="sc">&#123;</span><span class="bu">int</span>(N)<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span><span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="ss">f&quot;</span><span class="sc">&#123;</span><span class="bu">int</span>(e)<span class="sc">&#125;</span><span class="ss">&quot;</span>)</span><span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>        <span class="cf">elif</span> choice <span class="op">==</span> <span class="st">&#39;2&#39;</span>:</span><span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>            privateKey, signal <span class="op">=</span> generate_private_key(global_bits)</span><span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>            Cipher <span class="op">=</span> PKCS1_v1_5.new(privateKey)</span><span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>            c <span class="op">=</span> (Cipher.encrypt(flag.encode()))</span><span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(c)</span><span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>            exit()</span><span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span><span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>            exit()</span></code></pre></div><h2 id="分析">分析</h2><h3 id="mt19937-prng预测">MT19937 PRNG预测</h3><p>观察choice，发现<code>choice=1</code>和<code>choice=2</code>好像并没有直接的关系，但是都用到了getrandbits函数，联想到MT19937PRNG预测</p><p><a href="https://github.com/kmyk/mersenne-twister-predictor">mersenne-twister-predictor</a></p><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> random</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> mt19937predictor <span class="im">import</span> MT19937Predictor</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>predictor <span class="op">=</span> MT19937Predictor()</span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">624</span>):</span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    x <span class="op">=</span> random.getrandbits(<span class="dv">32</span>)</span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    predictor.setrandbits(x, <span class="dv">32</span>)</span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="cf">assert</span> random.getrandbits(<span class="dv">32</span>) <span class="op">==</span> predictor.getrandbits(<span class="dv">32</span>)</span></code></pre></div><p>题目一共有8次交互机会，当<code>choice=1</code>，pq都是<code>getrandbits(1024-32)</code>，d是<code>getrandbits(1024-32-32)</code>，所以前7轮可以获得<code>(992*2+960)*7=20608</code>bits，满足MT19937所需要的<code>624*32=19968</code>bits</p><p>然后根据每一轮的N、e用连分数恢复p、q、d，就可以预测了</p><h3 id="连分数">连分数</h3><p>比赛的时候没找到题目对应的论文，只找到了<a href="https://www.anquanke.com/post/id/221400#h3-4">X-NUCAweird</a>这个比较相似的，但是不会构造成题目<code>e=inverse_mod(d, (p*p-1)*(q*q-1))</code>的形式，论文提到这种形式可以找<code>e / (N^2-9/4*N+1)</code>的连分数</p><p><strong>注意</strong>：题目没有输出每一轮p和q的顺序，所以需要爆破互换pq的，复现为了方便验证，手动加上一个signal值</p><h2 id="本地复现">本地复现</h2><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sage.<span class="bu">all</span> <span class="im">import</span> <span class="op">*</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.Cipher <span class="im">import</span> PKCS1_v1_5</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> Crypto.PublicKey <span class="im">import</span> RSA</span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> random <span class="im">import</span> getrandbits</span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> mt19937predictor <span class="im">import</span> MT19937Predictor</span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>flag <span class="op">=</span> <span class="st">&quot;NepCTF</span><span class="sc">&#123;c4e4356067fb3bedc53dde7af59beb1c&#125;</span><span class="st">&quot;</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>global_bits <span class="op">=</span> <span class="dv">1024</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> generate_prime(bits: <span class="bu">int</span>):</span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    p <span class="op">=</span> (getrandbits(bits <span class="op">-</span> <span class="dv">32</span>) <span class="op">&lt;&lt;</span> <span class="dv">32</span>)</span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="bu">int</span>(next_prime(p))</span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> generate_private_key(bits: <span class="bu">int</span>):</span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    p, q <span class="op">=</span> generate_prime(bits), generate_prime(bits)</span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    n, phi <span class="op">=</span> p <span class="op">*</span> q, lcm(p<span class="op">-</span><span class="dv">1</span>, q<span class="op">-</span><span class="dv">1</span>)</span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    d <span class="op">=</span> <span class="bu">int</span>(inverse_mod(<span class="bn">0x10001</span>, phi))</span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    privateKey <span class="op">=</span> RSA.construct((n, <span class="bn">0x10001</span>, d, p, q))</span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> privateKey, p <span class="op">&gt;</span> q</span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>NN <span class="op">=</span> []</span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>ee <span class="op">=</span> []</span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>signal <span class="op">=</span> []</span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">7</span>):</span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>    p, q <span class="op">=</span> generate_prime(global_bits), generate_prime(global_bits)</span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> p <span class="op">&gt;</span> q:</span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>        signal.append(<span class="dv">1</span>)</span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>        signal.append(<span class="dv">0</span>)</span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>    N <span class="op">=</span> p <span class="op">*</span> q</span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>    d <span class="op">=</span> generate_prime(global_bits <span class="op">-</span> <span class="dv">32</span>)</span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>    e <span class="op">=</span> <span class="bu">int</span>(inverse_mod(d, (p <span class="op">*</span> p <span class="op">-</span> <span class="dv">1</span>) <span class="op">*</span> (q <span class="op">*</span> q <span class="op">-</span> <span class="dv">1</span>)))</span><span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>    NN.append(N)</span><span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>    ee.append(e)</span><span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a>privateKey <span class="op">=</span> generate_private_key(global_bits)[<span class="dv">0</span>]</span><span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a>Cipher <span class="op">=</span> PKCS1_v1_5.new(privateKey)</span><span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a>c <span class="op">=</span> Cipher.encrypt(flag.encode())</span><span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a><span class="co"># print(c)</span></span><span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a><span class="co"># 连分数解 pqd</span></span><span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> attack(N, e):</span><span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a>    convergents <span class="op">=</span> continued_fraction(e <span class="op">/</span> (N <span class="op">**</span> <span class="dv">2</span> <span class="op">-</span> Integer(<span class="dv">9</span>) <span class="op">/</span> Integer(<span class="dv">4</span>) <span class="op">*</span> N <span class="op">+</span> <span class="dv">1</span>)).convergents()</span><span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> c <span class="kw">in</span> convergents:</span><span id="cb3-46"><a href="#cb3-46" aria-hidden="true" tabindex="-1"></a>        k <span class="op">=</span> c.numerator()</span><span id="cb3-47"><a href="#cb3-47" aria-hidden="true" tabindex="-1"></a>        d <span class="op">=</span> c.denominator()</span><span id="cb3-48"><a href="#cb3-48" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="bu">pow</span>(<span class="bu">pow</span>(<span class="dv">2</span>, e, N), d, N) <span class="op">==</span> <span class="dv">2</span>:</span><span id="cb3-49"><a href="#cb3-49" aria-hidden="true" tabindex="-1"></a>            phi <span class="op">=</span> (e <span class="op">*</span> d <span class="op">-</span> <span class="dv">1</span>) <span class="op">//</span> k</span><span id="cb3-50"><a href="#cb3-50" aria-hidden="true" tabindex="-1"></a>            p_a_q <span class="op">=</span> <span class="bu">int</span>(sqrt(N <span class="op">**</span> <span class="dv">2</span> <span class="op">+</span> <span class="dv">1</span> <span class="op">-</span> phi <span class="op">+</span> <span class="dv">2</span> <span class="op">*</span> N))</span><span id="cb3-51"><a href="#cb3-51" aria-hidden="true" tabindex="-1"></a>            p_s_q <span class="op">=</span> <span class="bu">int</span>(sqrt(N <span class="op">**</span> <span class="dv">2</span> <span class="op">+</span> <span class="dv">1</span> <span class="op">-</span> phi <span class="op">-</span> <span class="dv">2</span> <span class="op">*</span> N))</span><span id="cb3-52"><a href="#cb3-52" aria-hidden="true" tabindex="-1"></a>            p <span class="op">=</span> (p_a_q <span class="op">-</span> p_s_q) <span class="op">//</span> <span class="dv">2</span></span><span id="cb3-53"><a href="#cb3-53" aria-hidden="true" tabindex="-1"></a>            <span class="cf">assert</span> N <span class="op">%</span> p <span class="op">==</span> <span class="dv">0</span></span><span id="cb3-54"><a href="#cb3-54" aria-hidden="true" tabindex="-1"></a>            q <span class="op">=</span> N <span class="op">//</span> p</span><span id="cb3-55"><a href="#cb3-55" aria-hidden="true" tabindex="-1"></a>            d <span class="op">=</span> <span class="bu">int</span>(inverse_mod(e, (p <span class="op">*</span> p <span class="op">-</span> <span class="dv">1</span>) <span class="op">*</span> (q <span class="op">*</span> q <span class="op">-</span> <span class="dv">1</span>)))</span><span id="cb3-56"><a href="#cb3-56" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> p, q, d</span><span id="cb3-57"><a href="#cb3-57" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-58"><a href="#cb3-58" aria-hidden="true" tabindex="-1"></a>predictor <span class="op">=</span> MT19937Predictor()</span><span id="cb3-59"><a href="#cb3-59" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-60"><a href="#cb3-60" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">7</span>):</span><span id="cb3-61"><a href="#cb3-61" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(i)</span><span id="cb3-62"><a href="#cb3-62" aria-hidden="true" tabindex="-1"></a>    p, q, d <span class="op">=</span> attack(NN[i], ee[i])</span><span id="cb3-63"><a href="#cb3-63" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 根据 signal 调整 pq 顺序</span></span><span id="cb3-64"><a href="#cb3-64" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> signal[i] <span class="op">==</span> <span class="dv">0</span>:</span><span id="cb3-65"><a href="#cb3-65" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> p <span class="op">&gt;</span> q:</span><span id="cb3-66"><a href="#cb3-66" aria-hidden="true" tabindex="-1"></a>            p, q <span class="op">=</span> q, p</span><span id="cb3-67"><a href="#cb3-67" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb3-68"><a href="#cb3-68" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> p <span class="op">&lt;</span> q:</span><span id="cb3-69"><a href="#cb3-69" aria-hidden="true" tabindex="-1"></a>            p, q <span class="op">=</span> q, p</span><span id="cb3-70"><a href="#cb3-70" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-71"><a href="#cb3-71" aria-hidden="true" tabindex="-1"></a>    predictor.setrandbits(p <span class="op">&gt;&gt;</span> <span class="dv">32</span>, <span class="dv">992</span>)</span><span id="cb3-72"><a href="#cb3-72" aria-hidden="true" tabindex="-1"></a>    predictor.setrandbits(q <span class="op">&gt;&gt;</span> <span class="dv">32</span>, <span class="dv">992</span>)</span><span id="cb3-73"><a href="#cb3-73" aria-hidden="true" tabindex="-1"></a>    predictor.setrandbits(d <span class="op">&gt;&gt;</span> <span class="dv">32</span>, <span class="dv">960</span>)</span><span id="cb3-74"><a href="#cb3-74" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-75"><a href="#cb3-75" aria-hidden="true" tabindex="-1"></a>p <span class="op">=</span> <span class="bu">int</span>(next_prime(predictor.getrandbits(<span class="dv">992</span>) <span class="op">&lt;&lt;</span> <span class="dv">32</span>))</span><span id="cb3-76"><a href="#cb3-76" aria-hidden="true" tabindex="-1"></a>q <span class="op">=</span> <span class="bu">int</span>(next_prime(predictor.getrandbits(<span class="dv">992</span>) <span class="op">&lt;&lt;</span> <span class="dv">32</span>))</span><span id="cb3-77"><a href="#cb3-77" aria-hidden="true" tabindex="-1"></a>n, phi <span class="op">=</span> p <span class="op">*</span> q, lcm(p<span class="op">-</span><span class="dv">1</span>, q<span class="op">-</span><span class="dv">1</span>)</span><span id="cb3-78"><a href="#cb3-78" aria-hidden="true" tabindex="-1"></a>d <span class="op">=</span> <span class="bu">int</span>(inverse_mod(<span class="bn">0x10001</span>, phi))</span><span id="cb3-79"><a href="#cb3-79" aria-hidden="true" tabindex="-1"></a>privateKey <span class="op">=</span> RSA.construct((n, <span class="bn">0x10001</span>, d, p, q))</span><span id="cb3-80"><a href="#cb3-80" aria-hidden="true" tabindex="-1"></a>Cipher <span class="op">=</span> PKCS1_v1_5.new(privateKey)</span><span id="cb3-81"><a href="#cb3-81" aria-hidden="true" tabindex="-1"></a>flag <span class="op">=</span> Cipher.decrypt(c, <span class="st">&#39;</span><span class="ch">\x00</span><span class="st">&#39;</span>)</span><span id="cb3-82"><a href="#cb3-82" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(flag)</span><span id="cb3-83"><a href="#cb3-83" aria-hidden="true" tabindex="-1"></a><span class="co"># b&#39;NepCTF&#123;c4e4356067fb3bedc53dde7af59beb1c&#125;&#39;</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 题目 </category>
          
          <category> 2023 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
            <tag> 随机数预测 </tag>
            
            <tag> 连分数 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
